@using AntDesign
@using DbArchiveTool.Application.Partitions
@using DbArchiveTool.Web.Services
@using Microsoft.AspNetCore.Components.Web

<Drawer Visible="Visible"
        Title="@("添加分区边界值")"
        Width="560"
        Placement="DrawerPlacement.Right"
        Closable="true"
        MaskClosable="false"
        OnClose="HandleClose">
    <Spin Spinning="@_loading">
        <div class="boundary-add-drawer-body">
            @if (_metadata != null)
            {
                <Descriptions Column="1" Size="@DescriptionsSize.Small" Bordered Style="margin-bottom:24px;">
                    <DescriptionsItem Title="表名">@($"{SchemaName}.{TableName}")</DescriptionsItem>
                    <DescriptionsItem Title="分区列">@_metadata.ColumnName (@_metadata.ColumnType)</DescriptionsItem>
                    <DescriptionsItem Title="分区函数">@_metadata.PartitionFunctionName</DescriptionsItem>
                    <DescriptionsItem Title="分区方案">@_metadata.PartitionSchemeName</DescriptionsItem>
                    <DescriptionsItem Title="当前边界数">@_metadata.Boundaries.Count</DescriptionsItem>
                </Descriptions>

                <Form Model="_formModel" Layout="FormLayout.Vertical">
                    <FormItem Label="生成方式">
                        <RadioGroup @bind-Value="_generationMode" ButtonStyle="@RadioButtonStyle.Solid">
                            <Radio RadioButton Value="@GenerationMode.Single">单个值</Radio>
                            <Radio RadioButton Value="@GenerationMode.Batch">批量生成</Radio>
                        </RadioGroup>
                        </FormItem>

                    @if (_generationMode == GenerationMode.Single)
                    {
                        <FormItem Label="* 边界值" Required>
                        @if (IsIntegerType)
                        {
                            <AntDesign.InputNumber TValue="long?"
                                                   @bind-Value="_intValue"
                                                   Placeholder="请输入整数值"
                                                   Style="width:100%" />
                            <div class="form-tip">建议范围: @GetStatHint()</div>
                        }
                        else if (IsBigIntType)
                        {
                            <AntDesign.InputNumber TValue="long?"
                                                   @bind-Value="_bigIntValue"
                                                   Placeholder="请输入长整数值"
                                                   Style="width:100%" />
                            <div class="form-tip">建议范围: @GetStatHint()</div>
                        }
                        else if (IsDateType)
                        {
                            <DatePicker @bind-Value="_dateValue"
                                        Placeholder="@("选择日期")"
                                        Picker="@DatePickerType.Date"
                                        Format="yyyy-MM-dd"
                                        Style="width:100%" />
                        }
                        else if (IsDateTimeType)
                        {
                            <DatePicker @bind-Value="_dateTimeValue"
                                        Placeholder="@("选择日期")"
                                        Picker="@DatePickerType.Date"
                                        Format="yyyy-MM-dd"
                                        Style="width:100%" />
                            <div class="form-tip">日期时间类型,将自动补充时间为 00:00:00</div>
                        }
                        else if (IsGuidType)
                        {
                            <Space Direction="@SpaceDirection.Vertical" Style="width:100%;">
                                <Input @bind-Value="_formModel.BoundaryValue"
                                       Placeholder="请输入GUID或点击生成"
                                       Style="width:100%" />
                                <Button OnClick="GenerateGuid">生成新GUID</Button>
                            </Space>
                        }
                        else
                        {
                            <Input @bind-Value="_formModel.BoundaryValue"
                                   Placeholder="@GetPlaceholderText()"
                                   Style="width:100%" />
                        }
                        </FormItem>
                    }
                    else
                    {
                        @if (IsIntegerType || IsBigIntType)
                        {
                            <FormItem Label="起始值" Required>
                                <Input @bind-Value="_generator.StartValue"
                                       Placeholder="起始值"
                                       Style="width:100%" />
                            </FormItem>
                            <FormItem Label="结束值" Required>
                                <Input @bind-Value="_generator.EndValue"
                                       Placeholder="结束值"
                                       Style="width:100%" />
                            </FormItem>
                            <FormItem Label="步长" Required>
                                <Input @bind-Value="_generator.StepValue"
                                       Placeholder="步长"
                                       Style="width:100%" />
                                <div class="form-tip">每次递增的数值</div>
                            </FormItem>
                            <FormItem>
                                <Button Type="@ButtonType.Primary" OnClick="GenerateNumericBoundaries">
                                    <Icon Type="thunderbolt" /> 生成边界值
                                </Button>
                            </FormItem>
                        }
                        else if (IsDateType || IsDateTimeType)
                        {
                            <FormItem Label="起始日期" Required>
                                <DatePicker @bind-Value="_generator.StartDate"
                                            Placeholder="@("选择起始日期")"
                                            Picker="@DatePickerType.Month"
                                            Format="yyyy-MM"
                                            Style="width:100%" />
                            </FormItem>
                            <FormItem Label="结束日期" Required>
                                <DatePicker @bind-Value="_generator.EndDate"
                                            Placeholder="@("选择结束日期")"
                                            Picker="@DatePickerType.Month"
                                            Format="yyyy-MM"
                                            Style="width:100%" />
                            </FormItem>
                            <FormItem Label="生成粒度" Required>
                                <RadioGroup @bind-Value="_generator.DateGranularity" ButtonStyle="@RadioButtonStyle.Solid">
                                    <Radio RadioButton Value="@("month")">按月</Radio>
                                    <Radio RadioButton Value="@("year")">按年</Radio>
                                </RadioGroup>
                                <div class="form-tip">按月: 每月1号 | 按年: 每年1月1号</div>
                            </FormItem>
                            <FormItem>
                                <Button Type="@ButtonType.Primary" OnClick="GenerateDateBoundaries">
                                    <Icon Type="thunderbolt" /> 生成边界值
                                </Button>
                            </FormItem>
                        }
                        else if (IsTextType)
                        {
                            <FormItem Label="边界值">
                                <div class="text-boundary-input">
                                    <Input @bind-Value="_generator.TextValue"
                                           Placeholder="输入文本值后按 Enter 添加"
                                           Style="flex:1"
                                           @onkeypress="HandleTextBoundaryKeyPress" />
                                    <Button Type="@ButtonType.Primary" OnClick="@(() => AddTextBoundary(_generator.TextValue))">添加</Button>
                                </div>
                                <div class="form-tip">每次输入一个值, 按回车或点击“添加”按钮</div>
                            </FormItem>
                        }
                        else if (IsGuidType)
                        {
                            <FormItem Label="生成数量">
                                <AntDesign.InputNumber TValue="int"
                                                       @bind-Value="_generator.GuidCount"
                                                       Min="1"
                                                       Max="100"
                                                       Placeholder="生成GUID数量"
                                                       Style="width:100%" />
                                <div class="form-tip">批量生成随机GUID (1-100个)</div>
                            </FormItem>
                            <FormItem>
                                <Button Type="@ButtonType.Primary" OnClick="GenerateGuids">
                                    <Icon Type="thunderbolt" /> 生成GUID
                                </Button>
                            </FormItem>
                        }
                        else
                        {
                            <Alert Message="当前列类型暂不支持批量生成, 请切换为单个值模式." Type="@AlertType.Warning" ShowIcon="true" />
                        }
                    }

                    @if (_generationMode == GenerationMode.Batch && _generatedBoundaries.Count > 0)
                    {
                        <Divider>待提交边界值 (@_generatedBoundaries.Count 个)</Divider>
                        <div class="generated-boundaries-container">
                            <div class="generated-boundaries">
                                @foreach (var boundary in _generatedBoundaries.OrderBy(b => b))
                                {
                                    <Tag Closable OnClose="@(() => RemoveGeneratedBoundary(boundary))">@boundary</Tag>
                                }
                            </div>
                            <div class="generated-actions">
                                <Button Size="@ButtonSize.Small" OnClick="ClearGeneratedBoundaries">清空</Button>
                            </div>
                        </div>
                    }

                    <FormItem Label="文件组名称">
                        <Select @bind-Value="_formModel.FilegroupName"
                                DataSource="@_availableFilegroups"
                                Placeholder="选择文件组"
                                AllowClear
                                Style="width:100%">
                        </Select>
                        <div class="form-tip">
                            选择用于新分区的文件组,默认为最后一个分区使用的文件组
                            @if (!string.IsNullOrEmpty(_nextUsedFilegroup))
                            {
                                <Text>: @_nextUsedFilegroup</Text>
                            }
                        </div>
                    </FormItem>

                    <FormItem Label="备注(可选)">
                        <Input TextAreaRows="3"
                               @bind-Value="_formModel.Notes"
                               Placeholder="添加操作备注..."
                               MaxLength="500" />
                    </FormItem>
                </Form>

                @if (_existingBoundaries.Count > 0)
                {
                    <Divider>已有边界值(最近5个)</Divider>
                    <div class="existing-boundaries">
                        @foreach (var boundary in _existingBoundaries.Take(5))
                        {
                            <Tag>@boundary.LiteralValue</Tag>
                        }
                        @if (_existingBoundaries.Count > 5)
                        {
                            <Tag>共@(_metadata.Boundaries.Count)个</Tag>
                        }
                    </div>
                }

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <Alert Message="@_errorMessage"
                           Type="@AlertType.Error"
                           Closable
                           OnClose="() => _errorMessage = null"
                           Style="margin-top:16px" />
                }
            }
            else if (_loading)
            {
                <Empty Description="@("正在加载分区元数据")" />
            }
            else
            {
                <Empty Description="@("无法获取分区元数据")" />

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <Alert Message="@_errorMessage"
                           Type="@AlertType.Error"
                           ShowIcon="true"
                           Style="margin-top:16px" />
                }
            }
        </div>
    </Spin>

    <div class="drawer-footer">
        <Space>
            <Button OnClick="@(async () => await HandleClose())">取消</Button>
            <Button Type="@ButtonType.Primary"
                    Loading="@_submitting"
                    Disabled="@(_metadata == null || _submitting || (_generationMode == GenerationMode.Batch && _generatedBoundaries.Count == 0))"
                    OnClick="@(async () => await HandleSubmit())">
                @if (_generationMode == GenerationMode.Batch && _generatedBoundaries.Count > 0)
                {
                    <span>批量提交 (@_generatedBoundaries.Count 个)</span>
                }
                else
                {
                    <span>提交</span>
                }
            </Button>
        </Space>
    </div>
</Drawer>

<style>
    .boundary-add-drawer-body {
        padding: 0 24px 24px 24px;
    }

    .drawer-footer {
        position: absolute;
        bottom: 0;
        width: 100%;
        border-top: 1px solid #f0f0f0;
        padding: 10px 24px;
        background: #fff;
        text-align: right;
    }

    .form-tip {
        font-size: 12px;
        color: #999;
        margin-top: 4px;
    }

    .existing-boundaries {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }

    .generated-boundaries-container {
        border: 1px dashed #d9d9d9;
        border-radius: 4px;
        padding: 12px;
        background-color: #fafafa;
        margin-bottom: 16px;
    }

    .generated-boundaries {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 12px;
        min-height: 32px;
    }

    .generated-actions {
        display: flex;
        justify-content: flex-end;
    }

    .text-boundary-input {
        display: flex;
        gap: 8px;
        width: 100%;
    }
</style>

@code {
    /// <summary>数据源ID</summary>
    [Parameter]
    public Guid DataSourceId { get; set; }

    /// <summary>架构名</summary>
    [Parameter]
    public string SchemaName { get; set; } = string.Empty;

    /// <summary>表名</summary>
    [Parameter]
    public string TableName { get; set; } = string.Empty;

    /// <summary>是否可见</summary>
    [Parameter]
    public bool Visible { get; set; }

    /// <summary>关闭回调</summary>
    [Parameter]
    public EventCallback OnClose { get; set; }

    /// <summary>提交成功回调</summary>
    [Parameter]
    public EventCallback OnSuccess { get; set; }

    [Inject]
    private PartitionManagementApiClient PartitionManagementApi { get; set; } = default!;

    [Inject]
    private IMessageService Message { get; set; } = default!;

    private PartitionMetadataDto? _metadata;
    private List<PartitionBoundaryItemDto> _existingBoundaries = new();
    private AddBoundaryFormModel _formModel = new();
    private bool _loading;
    private bool _submitting;
    private string? _errorMessage;
    private string? _loadedSchema;
    private string? _loadedTable;
    private string? _nextUsedFilegroup;
    private List<string> _availableFilegroups = new();
    private BoundaryGenerator _generator = new();
    private readonly List<string> _generatedBoundaries = new();
    private GenerationMode _generationMode = GenerationMode.Single;

    // 类型特定的值
    private long? _intValue;
    private long? _bigIntValue;
    private DateTime? _dateValue;
    private DateTime? _dateTimeValue;

    // 类型判断
    private bool IsIntegerType => _metadata?.ColumnType.Equals("int", StringComparison.OrdinalIgnoreCase) ?? false;
    private bool IsBigIntType => _metadata?.ColumnType.Equals("bigint", StringComparison.OrdinalIgnoreCase) ?? false;
    private bool IsDateType => _metadata?.ColumnType.Equals("date", StringComparison.OrdinalIgnoreCase) ?? false;
    private bool IsDateTimeType => _metadata?.ColumnType.Contains("datetime", StringComparison.OrdinalIgnoreCase) ?? false;
    private bool IsGuidType => _metadata?.ColumnType.Equals("uniqueidentifier", StringComparison.OrdinalIgnoreCase) ?? false;
    private bool IsVarCharType => _metadata?.ColumnType.Equals("varchar", StringComparison.OrdinalIgnoreCase) ?? false;
    private bool IsNVarCharType => _metadata?.ColumnType.Equals("nvarchar", StringComparison.OrdinalIgnoreCase) ?? false;
    private bool IsCharType => _metadata?.ColumnType.Equals("char", StringComparison.OrdinalIgnoreCase) ?? false;
    private bool IsNCharType => _metadata?.ColumnType.Equals("nchar", StringComparison.OrdinalIgnoreCase) ?? false;
    private bool IsTextType =>
        IsVarCharType ||
        IsNVarCharType ||
        IsCharType ||
        IsNCharType ||
        (_metadata?.ColumnType.Equals("text", StringComparison.OrdinalIgnoreCase) ?? false) ||
        (_metadata?.ColumnType.Equals("ntext", StringComparison.OrdinalIgnoreCase) ?? false);

    protected override async Task OnParametersSetAsync()
    {
        if (!Visible)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(SchemaName) || string.IsNullOrWhiteSpace(TableName))
        {
            _metadata = null;
            _errorMessage = "未提供有效的架构名或表名。";
            return;
        }

        var schemaChanged = !string.Equals(_loadedSchema, SchemaName, StringComparison.OrdinalIgnoreCase);
        var tableChanged = !string.Equals(_loadedTable, TableName, StringComparison.OrdinalIgnoreCase);
        var shouldReload = _metadata is null || schemaChanged || tableChanged;

        if (shouldReload)
        {
            await LoadMetadataAsync();
        }
    }

    private async Task LoadMetadataAsync()
    {
        _loading = true;
        _errorMessage = null;

        try
        {
            var result = await PartitionManagementApi.GetMetadataAsync(DataSourceId, SchemaName, TableName);
            if (result.IsSuccess && result.Value is not null)
                {
                    _metadata = result.Value;
                    _existingBoundaries = _metadata.Boundaries.OrderByDescending(b => b.Key).ToList();
                    _loadedSchema = SchemaName;
                    _loadedTable = TableName;
                    _formModel = new();
                    _generator = new();
                    _generatedBoundaries.Clear();
                    _generationMode = GenerationMode.Single;
                    _intValue = null;
                    _bigIntValue = null;
                    _dateValue = null;
                    _dateTimeValue = null;
                    
                    // 填充可用文件组列表
                    _availableFilegroups = _metadata.FilegroupMappings
                        .Select(m => m.FilegroupName)
                    .Distinct()
                    .OrderBy(n => n)
                    .ToList();
                
                // 自动设置 NEXT USED 文件组（使用最后一个分区的文件组）
                if (_metadata.FilegroupMappings.Count > 0)
                {
                    var lastMapping = _metadata.FilegroupMappings[^1];
                    _nextUsedFilegroup = lastMapping.FilegroupName;
                    _formModel.FilegroupName = _nextUsedFilegroup;
                }
            }
            else
            {
                _metadata = null;
                _existingBoundaries.Clear();
                _availableFilegroups.Clear();
                _loadedSchema = null;
                _loadedTable = null;
                _errorMessage = $"加载分区元数据失败: {result.Error ?? "未知错误"}";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"加载分区元数据时发生异常: {ex.Message}";
        }
        finally
        {
            _loading = false;
        }
    }

    private string GetPlaceholderText()
    {
        if (_metadata == null) return "请输入边界值";

        return _metadata.ColumnType.ToLower() switch
        {
            "varchar" or "nvarchar" or "char" or "nchar" => "请输入字符串值",
            "decimal" or "numeric" or "money" => "请输入数值",
            _ => "请输入边界值"
        };
    }

    private string GetStatHint()
    {
        // TODO: 从统计信息中获取建议范围
        return "根据数据分布选择合适的边界值";
    }

    private void GenerateGuid()
    {
        _formModel.BoundaryValue = Guid.NewGuid().ToString();
    }

    private void GenerateNumericBoundaries()
    {
        if (string.IsNullOrWhiteSpace(_generator.StartValue) ||
            string.IsNullOrWhiteSpace(_generator.EndValue) ||
            string.IsNullOrWhiteSpace(_generator.StepValue))
        {
            Message.Warning("请填写起始值、结束值和步长");
            return;
        }

        if (!long.TryParse(_generator.StartValue, out var start) ||
            !long.TryParse(_generator.EndValue, out var end) ||
            !long.TryParse(_generator.StepValue, out var step))
        {
            Message.Warning("请输入有效的数值");
            return;
        }

        if (step <= 0)
        {
            Message.Warning("步长必须大于0");
            return;
        }

        if (end <= start)
        {
            Message.Warning("结束值必须大于起始值");
            return;
        }

        _generatedBoundaries.Clear();

        for (var current = start + step; current <= end; current += step)
        {
            var value = current.ToString();
            if (!_generatedBoundaries.Contains(value) &&
                !_existingBoundaries.Any(b => b.LiteralValue.Equals(value, StringComparison.Ordinal)))
            {
                _generatedBoundaries.Add(value);
            }
        }

        if (_generatedBoundaries.Count == 0)
        {
            Message.Warning("没有生成新的边界值, 可能已存在或范围设置不合理");
        }
        else
        {
            Message.Success($"成功生成 {_generatedBoundaries.Count} 个边界值");
        }
    }

    private void GenerateDateBoundaries()
    {
        if (!_generator.StartDate.HasValue || !_generator.EndDate.HasValue)
        {
            Message.Warning("请选择起始与结束日期");
            return;
        }

        var start = _generator.StartDate.Value;
        var end = _generator.EndDate.Value;

        if (end <= start)
        {
            Message.Warning("结束日期必须大于起始日期");
            return;
        }

        var isYearly = string.Equals(_generator.DateGranularity, "year", StringComparison.OrdinalIgnoreCase);
        _generatedBoundaries.Clear();

        var current = new DateTime(start.Year, start.Month, 1);
        while (current <= end)
        {
            var boundaryDate = new DateTime(current.Year, current.Month, 1);
            var value = boundaryDate.ToString("yyyy-MM-dd");

            var existsInGenerated = _generatedBoundaries.Contains(value);
            var existsInPartition = IsDateType
                ? _existingBoundaries.Any(b => b.LiteralValue.Equals(value, StringComparison.Ordinal))
                : _existingBoundaries.Any(b => b.LiteralValue.StartsWith(value, StringComparison.Ordinal));

            if (!existsInGenerated && !existsInPartition)
            {
                _generatedBoundaries.Add(value);
            }

            current = isYearly ? boundaryDate.AddYears(1) : boundaryDate.AddMonths(1);
        }

        if (_generatedBoundaries.Count == 0)
        {
            Message.Warning("没有生成新的边界值, 可能已存在");
        }
        else
        {
            Message.Success($"成功生成 {_generatedBoundaries.Count} 个边界值");
        }
    }

    private void AddTextBoundary(string? value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            Message.Warning("请输入文本值");
            return;
        }

        var trimmed = value.Trim();

        if (_generatedBoundaries.Contains(trimmed))
        {
            Message.Warning("该值已在待提交列表中");
            return;
        }

        if (_existingBoundaries.Any(b => b.LiteralValue.Equals(trimmed, StringComparison.Ordinal)))
        {
            Message.Warning("该值已存在于分区边界中");
            return;
        }

        _generatedBoundaries.Add(trimmed);
        _generator.TextValue = string.Empty;
        Message.Success($"已添加: {trimmed}");
    }

    private void GenerateGuids()
    {
        if (_generator.GuidCount <= 0 || _generator.GuidCount > 100)
        {
            Message.Warning("生成数量必须在1-100之间");
            return;
        }

        var addedCount = 0;
        for (var i = 0; i < _generator.GuidCount; i++)
        {
            var guid = Guid.NewGuid().ToString();
            if (_generatedBoundaries.Contains(guid) ||
                _existingBoundaries.Any(b => b.LiteralValue.Equals(guid, StringComparison.OrdinalIgnoreCase)))
            {
                continue;
            }

            _generatedBoundaries.Add(guid);
            addedCount++;
        }

        if (addedCount == 0)
        {
            Message.Warning("没有生成新的GUID, 可能已存在");
        }
        else
        {
            Message.Success($"成功生成 {addedCount} 个GUID");
        }
    }

    private void RemoveGeneratedBoundary(string boundary)
    {
        _generatedBoundaries.Remove(boundary);
    }

    private void ClearGeneratedBoundaries()
    {
        _generatedBoundaries.Clear();
    }

    private void HandleTextBoundaryKeyPress(KeyboardEventArgs args)
    {
        if (string.Equals(args.Key, "Enter", StringComparison.OrdinalIgnoreCase))
        {
            AddTextBoundary(_generator.TextValue);
        }
    }

    private async Task HandleSubmit()
    {
        _errorMessage = null;

        if (_generationMode == GenerationMode.Single)
        {
            await SubmitSingleBoundaryAsync();
        }
        else
        {
            await SubmitBatchBoundariesAsync();
        }
    }

    private async Task SubmitSingleBoundaryAsync()
    {
        string? boundaryValue = null;

        if (IsIntegerType && _intValue.HasValue)
        {
            boundaryValue = _intValue.Value.ToString();
        }
        else if (IsBigIntType && _bigIntValue.HasValue)
        {
            boundaryValue = _bigIntValue.Value.ToString();
        }
        else if (IsDateType && _dateValue.HasValue)
        {
            boundaryValue = _dateValue.Value.ToString("yyyy-MM-dd");
        }
        else if (IsDateTimeType && _dateTimeValue.HasValue)
        {
            boundaryValue = _dateTimeValue.Value.ToString("yyyy-MM-dd HH:mm:ss");
        }
        else
        {
            boundaryValue = _formModel.BoundaryValue;
        }

        if (string.IsNullOrWhiteSpace(boundaryValue))
        {
            _errorMessage = "请输入边界值";
            return;
        }

        _submitting = true;

        try
        {
            var request = new AddPartitionBoundaryApiRequest(
                SchemaName,
                TableName,
                boundaryValue!,
                _formModel.FilegroupName,
                "WebUser", // TODO: 从认证上下文获取用户名
                _formModel.Notes
            );

            var result = await PartitionManagementApi.AddBoundaryAsync(DataSourceId, request);

            if (result.IsSuccess)
            {
                Message.Success("边界值添加成功!DDL脚本已生成并记录到审计日志。");
                await OnSuccess.InvokeAsync();
                await HandleClose();
            }
            else
            {
                _errorMessage = $"添加边界值失败: {result.Error}";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"提交时发生异常: {ex.Message}";
        }
        finally
        {
            _submitting = false;
        }
    }

    private async Task SubmitBatchBoundariesAsync()
    {
        if (_generatedBoundaries.Count == 0)
        {
            _errorMessage = "请先生成边界值";
            return;
        }

        _submitting = true;
        var successCount = 0;
        var failCount = 0;

        try
        {
            foreach (var boundaryValue in _generatedBoundaries.OrderBy(b => b, StringComparer.Ordinal))
            {
                try
                {
                    var request = new AddPartitionBoundaryApiRequest(
                        SchemaName,
                        TableName,
                        boundaryValue,
                        _formModel.FilegroupName,
                        "WebUser",
                        _formModel.Notes
                    );

                    var result = await PartitionManagementApi.AddBoundaryAsync(DataSourceId, request);

                    if (result.IsSuccess)
                    {
                        successCount++;
                    }
                    else
                    {
                        failCount++;
                    }
                }
                catch
                {
                    failCount++;
                }
            }

            if (successCount > 0)
            {
                var failSuffix = failCount > 0 ? $"，{failCount} 个失败" : string.Empty;
                Message.Success($"成功添加 {successCount} 个边界值{failSuffix}");
                await OnSuccess.InvokeAsync();
                await HandleClose();
            }
            else
            {
                _errorMessage = "批量添加失败";
            }
        }
        finally
        {
            _submitting = false;
        }
    }

    private async Task HandleClose()
    {
        ResetForm();
        await OnClose.InvokeAsync();
    }

    private void ResetForm()
    {
        // 重置状态
        _metadata = null;
        _formModel = new();
        _generator = new();
        _generatedBoundaries.Clear();
        _generationMode = GenerationMode.Single;
        _intValue = null;
        _bigIntValue = null;
        _dateValue = null;
        _dateTimeValue = null;
        _errorMessage = null;
        _loadedSchema = null;
        _loadedTable = null;
        _existingBoundaries.Clear();
        _availableFilegroups.Clear();
        _nextUsedFilegroup = null;
    }

    private class AddBoundaryFormModel
    {
        public string? BoundaryValue { get; set; }
        public string? FilegroupName { get; set; }
        public string? Notes { get; set; }
    }

    private enum GenerationMode
    {
        Single,
        Batch
    }

    private sealed class BoundaryGenerator
    {
        public string StartValue { get; set; } = string.Empty;
        public string EndValue { get; set; } = string.Empty;
        public string StepValue { get; set; } = string.Empty;
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string DateGranularity { get; set; } = "month";
        public string TextValue { get; set; } = string.Empty;
        public int GuidCount { get; set; } = 10;
    }
}

