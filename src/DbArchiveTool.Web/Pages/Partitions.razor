@page "/archive-data-sources/{DataSourceId:guid}/partitions"
@using AntDesign
@using AntDesign.TableModels
@using DbArchiveTool.Application.Partitions
@inject PartitionManagementApiClient PartitionApi

<PageHeader Title="分区管理" SubTitle="查看当前表的分区概览与安全状态">
    <Breadcrumb>
        <BreadcrumbItem><a href="/">归档数据源</a></BreadcrumbItem>
        <BreadcrumbItem>分区管理</BreadcrumbItem>
    </Breadcrumb>
</PageHeader>

<Spin Spinning="_loading">
    @if (_overview is null)
    {
        <Alert Message="尚未加载数据" Type="AlertType.Info" ShowIcon="true" />
    }
    else
    {
        <div class="partition-overview">
            <Descriptions Title="表信息" Column="2">
                <DescriptionsItem Label="表名">@_overview.TableName</DescriptionsItem>
                <DescriptionsItem Label="Range 模式">@(_overview.IsRangeRight ? "Range Right" : "Range Left")</DescriptionsItem>
            </Descriptions>
         <Table TItem="PartitionBoundaryItemDto"
             DataSource="_overview.Boundaries"
             RowKey="@(item => item.Key)"
             OnRowClick="HandleRowClick" />
        </div>
        <div class="partition-safety">
            <Card Title="安全状态" Loading="_loadingSafety">
                @if (_safety is null)
                {
                    <Alert Message="选择一个边界查看详情" Type="AlertType.Info" ShowIcon="true" />
                }
                else
                {
                    <Descriptions Column="2">
                        <DescriptionsItem Label="边界">@_safety.BoundaryKey</DescriptionsItem>
                        <DescriptionsItem Label="行数">@_safety.RowCount</DescriptionsItem>
                        <DescriptionsItem Label="是否包含数据">@(_safety.HasData ? "是" : "否")</DescriptionsItem>
                        <DescriptionsItem Label="建议 SWITCH">@(_safety.SuggestSwitch ? "是" : "否")</DescriptionsItem>
                    </Descriptions>
                }
            </Card>
        </div>
    }
</Spin>

@code {
    [Parameter] public Guid DataSourceId { get; set; }
    [Parameter] public string Schema { get; set; } = "dbo";
    [Parameter] public string Table { get; set; } = string.Empty;

    private bool _loading;
    private bool _loadingSafety;
    private PartitionOverviewDto? _overview;
    private PartitionBoundarySafetyDto? _safety;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(Table))
        {
            return;
        }

        _loading = true;
        try
        {
            _overview = await PartitionApi.GetOverviewAsync(DataSourceId, Schema, Table);
            _safety = null;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task LoadSafetyAsync(string boundaryKey)
    {
        _loadingSafety = true;
        try
        {
            _safety = await PartitionApi.GetSafetyAsync(DataSourceId, boundaryKey, Schema, Table);
        }
        finally
        {
            _loadingSafety = false;
        }
    }

    private async Task HandleRowClick(RowData<PartitionBoundaryItemDto> rowData)
    {
        if (rowData?.Data is null)
        {
            return;
        }

        await LoadSafetyAsync(rowData.Data.Key);
    }
}
