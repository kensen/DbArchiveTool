@page "/archive-data-sources/{DataSourceId:guid}/partitions"
@attribute [ReuseTabsPage(Title = "分区管理", Closable = true)]
@using AntDesign
@using System.Globalization
@using System.Text.RegularExpressions
@using DbArchiveTool.Application.Partitions
@using DbArchiveTool.Domain.Partitions
@using DbArchiveTool.Web.Core
@using DbArchiveTool.Web.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@inject PartitionManagementApiClient PartitionApi
@inject PartitionInfoApiClient PartitionInfoApi
@inject PartitionConfigurationApiClient PartitionConfigApi
@inject AdminSessionState AdminSession
@inject MessageService Message
@inject NavigationManager Navigation

<PageTitle>分区管理</PageTitle>

<PageHeader Title="分区表管理" OnBack="NavigateBack">
    <PageHeaderExtra>
        <div class="header-actions">
            <Button Type="@ButtonType.Default" Icon="database" OnClick="ShowSourceServerInfo">源服务器信息</Button>
            <Button Type="@ButtonType.Default" Icon="setting" OnClick="ShowTargetServerConfig">目标服务器配置</Button>
            <Button Type="@ButtonType.Primary" Icon="reload" Loading="_loading" OnClick="ReloadAsync">刷新</Button>
        </div>
    </PageHeaderExtra>
    <PageHeaderContent>
        <div class="server-info">
            <Descriptions Size="@DescriptionsSize.Small" Column="3">
                <DescriptionsItem Title="数据源">@_dataSourceName</DescriptionsItem>
                <DescriptionsItem Title="服务器">@_serverAddress</DescriptionsItem>
                <DescriptionsItem Title="数据库">@_databaseName</DescriptionsItem>
            </Descriptions>
        </div>
    </PageHeaderContent>
</PageHeader>

<div class="partition-container">
    <div class="partition-tables-section">
        <div class="section-header">
            <h3>分区表配置</h3>
            <Space>
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" Icon="plus" Size="@ButtonSize.Small" OnClick="ShowAddPartitionConfig">添加分区配置</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Default" Icon="edit" Size="@ButtonSize.Small" Disabled="@(_selectedTable == null)" OnClick="ShowEditPartitionConfig">修改分区配置</Button>
                </SpaceItem>
            </Space>
        </div>

        <Table TItem="PartitionTableInfo"
               DataSource="_partitionTables"
               Loading="_loading"
               Size="@TableSize.Small"
               Bordered
               @bind-SelectedRows="_selectedTableRows"
               OnRowClick="OnTableRowClick"
               RowClassName="@(x => x.Data == _selectedTable ? "table-row-selected" : "")">
            <Selection Key="@(context.TableName)" Type="@SelectionType.Radio" />
            <PropertyColumn Property="c => c.SchemaName" Title="架构名" Sortable />
            <PropertyColumn Property="c => c.TableName" Title="表名" Sortable />
            <PropertyColumn Property="c => c.PartitionFunction" Title="分区函数" />
            <PropertyColumn Property="c => c.PartitionScheme" Title="分区方案" />
            <PropertyColumn Property="c => c.PartitionColumn" Title="分区列" />
            <PropertyColumn Property="c => c.DataType" Title="数据类型" />
            <PropertyColumn Property="c => c.TotalPartitions" Title="分区数" Sortable />
            <PropertyColumn Property="c => c.IsRangeRight" Title="分区类型">
                <Template>
                    <Tag Color="@(context.IsRangeRight ? "blue" : "green")">@(context.IsRangeRight ? "RIGHT" : "LEFT")</Tag>
                </Template>
            </PropertyColumn>
            <ActionColumn Title="操作">
                <Space Size="@("small")">
                    <SpaceItem>
                        <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" OnClick="() => ViewTableDetails(context)">详情</Button>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>
    </div>

    <div class="partition-details-section">
        <div class="section-header">
            <h3>分区边界值明细 @(_selectedTable != null ? $"- {_selectedTable.SchemaName}.{_selectedTable.TableName}" : "")</h3>
            <Space>
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" Icon="plus" Size="@ButtonSize.Small" Disabled="@(_selectedTable == null)" OnClick="ShowAddPartitionValue">添加分区值</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Default" Icon="scissor" Size="@ButtonSize.Small" Disabled="@(_selectedTable == null || _selectedPartitionRows.Count() == 0)" OnClick="ShowSplitPartition">拆分分区</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Default" Icon="merge-cells" Size="@ButtonSize.Small" Disabled="@(_selectedTable == null || _selectedPartitionRows.Count() == 0)" OnClick="ShowMergePartition">合并分区</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Default" Icon="swap" Size="@ButtonSize.Small" Disabled="@(_selectedTable == null || _selectedPartitionRows.Count() == 0)" OnClick="ShowSwitchPartition">切换分区</Button>
                </SpaceItem>
            </Space>
        </div>

        @if (_selectedTable == null)
        {
            <Empty Description="@("请先选择一个分区表")" />
        }
        else
        {
            <Table TItem="PartitionDetailInfo"
                   DataSource="_partitionDetails"
                   Loading="_loadingDetails"
                   Size="@TableSize.Small"
                   Bordered
                   @bind-SelectedRows="_selectedPartitionRows">
                <Selection Key="@(context.PartitionNumber.ToString())" />
                <PropertyColumn Property="c => c.PartitionNumber" Title="分区号" Sortable DefaultSortOrder="@SortDirection.Ascending" />
                <PropertyColumn Property="c => c.BoundaryValue" Title="边界值" />
                <PropertyColumn Property="c => c.RangeType" Title="范围类型">
                    <Template>
                        <Tag Color="@(context.RangeType == "RIGHT" ? "blue" : "green")">@context.RangeType</Tag>
                    </Template>
                </PropertyColumn>
                <PropertyColumn Property="c => c.FilegroupName" Title="文件组" />
                <PropertyColumn Property="c => c.RowCount" Title="行数" Sortable />
                <PropertyColumn Property="c => c.TotalSpaceMB" Title="空间(MB)" Sortable />
                <PropertyColumn Property="c => c.DataCompression" Title="压缩">
                    <Template>
                        <Tag Color="@(context.DataCompression == "NONE" ? "default" : "cyan")">@context.DataCompression</Tag>
                    </Template>
                </PropertyColumn>
                <PropertyColumn Property="c => c.CreatedDate" Title="创建时间" Format="yyyy-MM-dd HH:mm" />
            </Table>
        }
    </div>
</div>

<Modal Title="源服务器信息" @bind-Visible="_sourceServerModalVisible" Footer="null" Width="600">
    <Descriptions Bordered Column="1" Size="@DescriptionsSize.Small">
        <DescriptionsItem Title="服务器地址">@_serverAddress</DescriptionsItem>
        <DescriptionsItem Title="端口">@_serverPort</DescriptionsItem>
        <DescriptionsItem Title="数据库">@_databaseName</DescriptionsItem>
        <DescriptionsItem Title="认证方式">@(_useIntegratedSecurity ? "Windows 集成" : $"SQL 登录 ({_userName})")</DescriptionsItem>
        <DescriptionsItem Title="连接状态">
            <Tag Color="@(_isConnected ? "success" : "error")">@(_isConnected ? "已连接" : "未连接")</Tag>
        </DescriptionsItem>
    </Descriptions>
</Modal>

<Modal Title="目标服务器配置" @bind-Visible="_targetServerModalVisible" Width="720" OnOk="SaveTargetServerConfig" OnCancel="() => _targetServerModalVisible = false">
    <Form Model="_targetServerModel" LabelColSpan="6" WrapperColSpan="18">
        <FormItem Label="目标服务器">
            <Switch CheckedChildren="使用源服务器" UnCheckedChildren="自定义配置" @bind-Checked="_targetServerModel.UseSourceAsTarget" />
            <span style="margin-left: 12px; color: #8c8c8c; font-size: 13px;">
                @(_targetServerModel.UseSourceAsTarget ? "归档数据将保存在源服务器" : "归档数据将保存在自定义目标服务器")
            </span>
        </FormItem>

        @if (!_targetServerModel.UseSourceAsTarget)
        {
            <Divider>目标服务器信息</Divider>

            <FormItem Label="服务器地址" Required>
                <Input @bind-Value="_targetServerModel.ServerAddress" Placeholder="例如: localhost 或 192.168.1.100" />
            </FormItem>

            <FormItem Label="端口">
                <AntDesign.InputNumber @bind-Value="_targetServerModel.Port" Min="1" Max="65535" DefaultValue="1433" Style="width: 100%;" />
            </FormItem>

            <FormItem Label="数据库名称" Required>
                <Input @bind-Value="_targetServerModel.DatabaseName" Placeholder="目标数据库名称" />
            </FormItem>

            <FormItem Label="认证方式">
                <Switch CheckedChildren="Windows" UnCheckedChildren="SQL 登录" @bind-Checked="_targetServerModel.UseIntegratedSecurity" />
            </FormItem>

            <FormItem Label="登录账号" Required="@(!_targetServerModel.UseIntegratedSecurity)">
                <Input @bind-Value="_targetServerModel.UserName" Disabled="_targetServerModel.UseIntegratedSecurity" Placeholder="SQL 登录账号" />
            </FormItem>

            <FormItem Label="登录密码">
                <InputPassword @bind-Value="_targetServerModel.Password" Disabled="_targetServerModel.UseIntegratedSecurity" Placeholder="留空表示不修改原密码" VisibilityToggle="true" />
            </FormItem>

            <FormItem Label="连接测试">
                <div style="display: flex; align-items: center; gap: 12px;">
                    <Button Type="ButtonType.Default" Icon="api" Loading="_testingTargetConnection" OnClick="TestTargetServerConnection">测试连接</Button>
                    @if (!string.IsNullOrEmpty(_targetConnectionTestResult))
                    {
                        <span style="color: @(_targetConnectionTestSuccess ? "#52c41a" : "#ff4d4f"); font-weight: 500;">
                            @(_targetConnectionTestSuccess ? "✓" : "✗") @_targetConnectionTestResult
                        </span>
                    }
                </div>
            </FormItem>
        }
    </Form>
</Modal>

<Drawer @bind-Visible="_partitionConfigModalVisible"
        Title="@_partitionConfigModalTitle"
        Width="760"
        Placement="DrawerPlacement.Right"
        Closable="false">
    <Spin Spinning="@(_loadingPartitionWizard || _submittingPartitionConfig)">
        <Steps Current="@_configWizard.CurrentStep" Size="@StepsSize.Small">
            <Step Title="基础信息" />
            <Step Title="分区值" />
            <Step Title="完成" />
        </Steps>

        <div class="partition-wizard-body">
            @if (_configWizard.CurrentStep == 0)
            {
                <div class="wizard-step">
                    <Descriptions Column="1" Size="@DescriptionsSize.Small" Style="margin-bottom:16px;">
                        <DescriptionsItem Title="源表">@($"{_configWizard.Form.SchemaName}.{_configWizard.Form.TableName}")</DescriptionsItem>
                        <DescriptionsItem Title="分区函数">@_selectedTable?.PartitionFunction</DescriptionsItem>
                        <DescriptionsItem Title="分区方案">@_selectedTable?.PartitionScheme</DescriptionsItem>
                    </Descriptions>

                    <Divider>分区列</Divider>
                    <Form Model="_configWizard.Form" Layout="FormLayout.Horizontal" LabelColSpan="6" WrapperColSpan="18">
                        <FormItem Label="源表" Required>
                            <Select TItem="string" TItemValue="string"
                                    @bind-Value="_configWizard.Form.SourceTableKey"
                                    OnSelectedItemChanged="HandleSourceTableChanged"
                                    Style="width:100%">
                                @foreach (var option in _configWizard.TableOptions)
                                {
                                    <SelectOption Value="@option.Key" Label="@option.Label" />
                                }
                            </Select>
                        </FormItem>
                        <FormItem Label="分区列" Required>
                            <Select TItem="string" TItemValue="string"
                                    @bind-Value="_configWizard.Form.PartitionColumn"
                                    OnSelectedItemChanged="HandlePartitionColumnChanged"
                                    Style="width:100%">
                                @foreach (var column in _configWizard.Columns)
                                {
                                    <SelectOption Value="@column.ColumnName" Label="@($"{column.ColumnName} ({column.DisplayType})")" />
                                }
                            </Select>
                        </FormItem>
                        <FormItem Label="列可空">
                            <Tag Color="@(_configWizard.SelectedColumnIsNullable ? "orange" : "green")">@(_configWizard.SelectedColumnIsNullable ? "可为空" : "NOT NULL")</Tag>
                        </FormItem>
                        @if (_configWizard.SelectedColumnIsNullable)
                        {
                            <FormItem Label="去可空">
                                <Space Align="@SpaceAlign.Center">
                                    <Switch @bind-Checked="_configWizard.Form.RequirePartitionColumnNotNull" />
                                    <span class="form-tip">启用后将在脚本中包含 ALTER COLUMN。</span>
                                </Space>
                            </FormItem>
                        }
                        <FormItem Label="列统计">
                            <Space Direction="@SpaceDirection.Vertical">
                                <span>最小值:@FormatColumnStatValue(_configWizard.ColumnMinValue)</span>
                                <span>最大值:@FormatColumnStatValue(_configWizard.ColumnMaxValue)</span>
                            </Space>
                        </FormItem>
                    </Form>

                    <Divider>存放模式</Divider>
                    <Form Model="_configWizard.Form" Layout="FormLayout.Horizontal" LabelColSpan="6" WrapperColSpan="18">
                        <FormItem Label="模式">
                            <Select TItem="PartitionStorageMode" TItemValue="PartitionStorageMode"
                                    Value="_configWizard.Form.StorageMode"
                                    ValueChanged="OnStorageModeChanged"
                                    ValueExpression="() => _configWizard.Form.StorageMode"
                                    Style="width:220px">
                                <SelectOption Value="@PartitionStorageMode.PrimaryFilegroup" Label="主文件组" />
                                <SelectOption Value="@PartitionStorageMode.DedicatedFilegroupSingleFile" Label="单文件组 + 数据文件" />
                            </Select>
                        </FormItem>
                        <FormItem Label="文件组名称" Required>
                            <Input @bind-Value="_configWizard.Form.FilegroupName" 
                                   Placeholder="请输入文件组名称"
                                   OnBlur="HandleFilegroupNameChanged" />
                        </FormItem>
                        @if (_configWizard.Form.StorageMode == PartitionStorageMode.DedicatedFilegroupSingleFile)
                        {
                            <FormItem Label="数据目录" Required>
                                <Input @bind-Value="_configWizard.Form.DataFileDirectory" Placeholder="例如 D:\SQLData\" />
                            </FormItem>
                            <FormItem Label="文件名" Required>
                                <Input @bind-Value="_configWizard.Form.DataFileName" Placeholder="示例 DB_FG_p202501010101.ndf" />
                            </FormItem>
                            <FormItem Label="初始大小(MB)" Required>
                                <AntDesign.InputNumber TValue="int?" @bind-Value="_configWizard.Form.InitialFileSizeMb" Min="1" />
                            </FormItem>
                            <FormItem Label="自动增长(MB)" Required>
                                <AntDesign.InputNumber TValue="int?" @bind-Value="_configWizard.Form.AutoGrowthMb" Min="1" />
                            </FormItem>
                        }
                    </Form>

                    <Divider>目标表</Divider>
                    <Form Model="_configWizard.Form" Layout="FormLayout.Horizontal" LabelColSpan="6" WrapperColSpan="18">
                        <FormItem Label="目标数据库" Required>
                            <Select TItem="string" TItemValue="string" @bind-Value="_configWizard.Form.TargetDatabaseName" Style="width:100%">
                                @foreach (var db in _configWizard.TargetDatabases)
                                {
                                    <SelectOption Value="@db.Name" Label="@db.Name" />
                                }
                            </Select>
                        </FormItem>
                        <FormItem Label="目标架构" Required>
                            <Input @bind-Value="_configWizard.Form.TargetSchemaName" />
                        </FormItem>
                        <FormItem Label="目标表名" Required>
                            <Input @bind-Value="_configWizard.Form.TargetTableName" />
                        </FormItem>
                        <FormItem Label="备注">
                            <InputTextArea @bind-Value="_configWizard.Form.Remarks" Rows="3" />
                        </FormItem>
                    </Form>
                </div>
            }
            else if (_configWizard.CurrentStep == 1)
            {
                <div class="wizard-step">
                    <Descriptions Column="1" Size="@DescriptionsSize.Small" Style="margin-bottom:16px;">
                        <DescriptionsItem Title="源表">@($"{_configWizard.Form.SchemaName}.{_configWizard.Form.TableName}")</DescriptionsItem>
                        <DescriptionsItem Title="分区列">@_configWizard.Form.PartitionColumn</DescriptionsItem>
                        <DescriptionsItem Title="当前数量">@_configWizard.Boundaries.Count</DescriptionsItem>
                    </Descriptions>

                    <Alert Type="@AlertType.Info" ShowIcon="true" Message="分区边界需按升序排列，提交时系统会自动排序并去重。" />

                    <div class="boundary-actions">
                        <Input Placeholder="输入新的边界值"
                               Style="width:260px"
                               @bind-Value="_configWizard.NewBoundaryValue"
                               @onkeypress="OnBoundaryInputKeyPress" />
                        <Button Type="@ButtonType.Primary" OnClick="AddManualBoundary">添加</Button>
                        <Button OnClick="ClearBoundaryValues">清空</Button>
                    </div>

                    @if (SupportsAutoGeneration)
                    {
                        <Card Title="批量生成" Size="@CardSize.Small" Style="margin-top:12px;">
                            @if (_configWizard.ColumnKind == PartitionValueKind.Int || _configWizard.ColumnKind == PartitionValueKind.BigInt)
                            {
                                <Space Direction="@SpaceDirection.Horizontal">
                                    <Input Placeholder="@("起始值")" Style="width:120px" @bind-Value="_configWizard.Generator.StartValue" />
                                    <Input Placeholder="@("结束值")" Style="width:120px" @bind-Value="_configWizard.Generator.EndValue" />
                                    <Input Placeholder="@("步长")" Style="width:120px" @bind-Value="_configWizard.Generator.StepValue" />
                                    <Button OnClick="GenerateNumericBoundaries">生成</Button>
                                </Space>
                            }
                            else if (IsDateKind)
                            {
                                <Space Direction="@SpaceDirection.Horizontal" Align="@SpaceAlign.Center">
                                    <DatePicker @bind-Value="_configWizard.Generator.StartDate"
                                                Placeholder="@("起始日期")"
                                                ShowTime="@(_configWizard.ColumnKind != PartitionValueKind.Date)" />
                                    <DatePicker @bind-Value="_configWizard.Generator.EndDate"
                                                Placeholder="@("结束日期")"
                                                ShowTime="@(_configWizard.ColumnKind != PartitionValueKind.Date)" />
                                    <AntDesign.InputNumber TValue="int" @bind-Value="_configWizard.Generator.StepDays" Min="1" />
                                    <span class="form-tip">步长(天)</span>
                                    <Button OnClick="GenerateDateBoundaries">生成</Button>
                                </Space>
                            }
                        </Card>
                    }

                    <Table TItem="PartitionBoundaryItem"
                           DataSource="_configWizard.Boundaries"
                           Size="@TableSize.Small"
                           Style="margin-top:16px;">
                        <PropertyColumn Title="边界值" Property="c => c.DisplayValue" />
                        <ActionColumn Title="操作">
                            <Template Context="context">
                                <Button Type="@ButtonType.Link" Danger OnClick="() => RemoveBoundary(context.Id)">删除</Button>
                            </Template>
                        </ActionColumn>
                    </Table>
                </div>
            }
            else
            {
                <div class="wizard-step wizard-step-complete">
                    <Result Status="@ResultStatus.Success" Title="分区配置创建成功">
                        <ul class="wizard-summary">
                            <li>配置编号：@_configWizard.ConfigurationId</li>
                            <li>分区表：@($"{_configWizard.Form.SchemaName}.{_configWizard.Form.TableName}")</li>
                            <li>分区列：@_configWizard.Form.PartitionColumn</li>
                            <li>边界数量：@_configWizard.Boundaries.Count</li>
                        </ul>
                    </Result>
                </div>
            }
        </div>
    </Spin>

    <div class="partition-wizard-footer">
        <Space>
            @if (_configWizard.CurrentStep < 2)
            {
                <Button OnClick="ClosePartitionWizard">取消</Button>
            }
            @if (_configWizard.CurrentStep > 0 && _configWizard.CurrentStep < 2)
            {
                <Button OnClick="PrevPartitionStep">上一步</Button>
            }
            @if (_configWizard.CurrentStep == 0)
            {
                <Button Type="@ButtonType.Primary" OnClick="NextPartitionStep">下一步</Button>
            }
            else if (_configWizard.CurrentStep == 1)
            {
                <Button Type="@ButtonType.Primary" Loading="_submittingPartitionConfig" OnClick="SubmitPartitionConfigurationAsync">提交配置</Button>
            }
            else
            {
                <Button Type="@ButtonType.Primary" OnClick="ClosePartitionWizard">完成</Button>
            }
        </Space>
    </div>
</Drawer>

<Modal Title="添加分区边界值" @bind-Visible="_addPartitionValueModalVisible" Width="600" OnOk="SavePartitionValue" OnCancel="() => _addPartitionValueModalVisible = false">
    <Alert Type="@AlertType.Info" Message="添加分区值功能开发中" ShowIcon="true" />
</Modal>

<Modal Title="拆分分区" @bind-Visible="_splitModalVisible" Width="720" OnOk="ExecuteSplit" OnCancel="() => _splitModalVisible = false">
    <Alert Type="@AlertType.Info" Message="拆分分区功能开发中" ShowIcon="true" />
</Modal>

<Modal Title="合并分区" @bind-Visible="_mergeModalVisible" Width="720" OnOk="ExecuteMerge" OnCancel="() => _mergeModalVisible = false">
    <Alert Type="@AlertType.Info" Message="合并分区功能开发中" ShowIcon="true" />
</Modal>

<Modal Title="切换分区" @bind-Visible="_switchModalVisible" Width="720" OnOk="ExecuteSwitch" OnCancel="() => _switchModalVisible = false">
    <Alert Type="@AlertType.Info" Message="切换分区功能开发中" ShowIcon="true" />
</Modal>

<style>
    .partition-container { display: flex; flex-direction: column; gap: 16px; padding: 16px; height: calc(100vh - 200px); }
    .partition-tables-section { flex: 0 0 auto; max-height: 40%; overflow: auto; background: white; padding: 16px; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.05); }
    .partition-details-section { flex: 1 1 auto; overflow: auto; background: white; padding: 16px; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.05); }
    .section-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; padding-bottom: 12px; border-bottom: 1px solid #f0f0f0; }
    .partition-wizard-body { margin-top: 16px; }
    .wizard-step { padding-top: 16px; }
    .wizard-step .form-tip { color: #8c8c8c; font-size: 12px; }
    .boundary-actions { margin-top: 12px; display: flex; gap: 12px; align-items: center; }
    .partition-wizard-footer { margin-top: 24px; text-align: right; }
    .wizard-summary { list-style: none; padding-left: 0; margin: 16px 0 0; }
    .wizard-summary li { margin-bottom: 6px; }
    .section-header h3 { margin: 0; font-size: 16px; font-weight: 600; color: #262626; }
    .header-actions { display: flex; gap: 8px; }
    .server-info { margin-top: 12px; }
    .table-row-selected { background-color: #e6f7ff !important; }
    ::deep .ant-table-tbody > tr:hover > td { cursor: pointer; }
</style>

@code {
    [Parameter] public Guid DataSourceId { get; set; }
    private string _dataSourceName = "加载中...";
    private string _serverAddress = "";
    private int _serverPort = 1433;
    private string _databaseName = "";
    private bool _useIntegratedSecurity = true;
    private string _userName = "";
    private bool _isConnected = false;
    private bool _loading = false;
    private List<PartitionTableInfo> _partitionTables = new();
    private IEnumerable<PartitionTableInfo> _selectedTableRows = Array.Empty<PartitionTableInfo>();
    private PartitionTableInfo? _selectedTable = null;
    private bool _loadingDetails = false;
    private List<PartitionDetailInfo> _partitionDetails = new();
    private IEnumerable<PartitionDetailInfo> _selectedPartitionRows = Array.Empty<PartitionDetailInfo>();
    private bool _sourceServerModalVisible = false;
    private bool _targetServerModalVisible = false;
    private TargetServerConfigModel _targetServerModel = new();
    private bool _testingTargetConnection = false;
    private string _targetConnectionTestResult = "";
    private bool _targetConnectionTestSuccess = false;
    private bool _partitionConfigModalVisible = false;
    private string _partitionConfigModalTitle = "添加分区配置";
    private bool _loadingPartitionWizard = false;
    private bool _submittingPartitionConfig = false;
    private PartitionConfigWizardState _configWizard = new();
    private bool _addPartitionValueModalVisible = false;
    private bool _splitModalVisible = false;
    private bool _mergeModalVisible = false;
    private bool _switchModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataSourceInfoAsync();
        await LoadPartitionTablesAsync();
    }

    private async Task LoadDataSourceInfoAsync()
    {
        try
        {
            // 从API加载数据源信息
            var response = await PartitionInfoApi.GetDataSourceAsync(DataSourceId);
            if (response != null)
            {
                _dataSourceName = response.Name ?? "未命名数据源";
                _serverAddress = response.ServerAddress ?? "";
                _serverPort = response.ServerPort;
                _databaseName = response.DatabaseName ?? "";
                _useIntegratedSecurity = response.UseIntegratedSecurity;
                _userName = response.UserName ?? "";
                _isConnected = true;
            }
        }
        catch (Exception ex)
        {
            Message.Error($"加载数据源信息失败: {ex.Message}");
        }
    }

    private async Task LoadPartitionTablesAsync()
    {
        _loading = true;
        try
        {
            // 从API加载真实分区表数据
            var tables = await PartitionInfoApi.GetPartitionTablesAsync(DataSourceId);
            _partitionTables = tables.Select(t => new PartitionTableInfo
            {
                SchemaName = t.SchemaName,
                TableName = t.TableName,
                PartitionFunction = t.PartitionFunction,
                PartitionScheme = t.PartitionScheme,
                PartitionColumn = t.PartitionColumn,
                DataType = t.DataType,
                TotalPartitions = t.TotalPartitions,
                IsRangeRight = t.IsRangeRight
            }).ToList();
        }
        catch (Exception ex)
        {
            Message.Error($"加载分区表失败: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task LoadPartitionDetailsAsync(PartitionTableInfo table)
    {
        _loadingDetails = true;
        _partitionDetails = new List<PartitionDetailInfo>();
        await InvokeAsync(StateHasChanged);
        try
        {
            // 从API加载真实分区明细数据
            var details = await PartitionInfoApi.GetPartitionDetailsAsync(DataSourceId, table.SchemaName, table.TableName);
            _partitionDetails = details.Select(d => new PartitionDetailInfo
            {
                PartitionNumber = d.PartitionNumber,
                BoundaryValue = FormatBoundaryValue(d.BoundaryValue, table.DataType),
                RangeType = d.RangeType,
                FilegroupName = d.FilegroupName,
                RowCount = d.RowCount,
                TotalSpaceMB = d.TotalSpaceMB,
                DataCompression = d.DataCompression,
                CreatedDate = DateTime.Now // API未返回,使用当前时间占位
            }).ToList();
        }
        catch (Exception ex)
        {
            Message.Error($"加载分区明细失败: {ex.Message}");
        }
        finally
        {
            _loadingDetails = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void OnTableRowClick(RowData<PartitionTableInfo> row)
    {
        _selectedTable = row.Data;
        _selectedTableRows = new[] { row.Data };
        _selectedPartitionRows = Array.Empty<PartitionDetailInfo>();

        _ = InvokeAsync(async () =>
        {
            StateHasChanged();
            await LoadPartitionDetailsAsync(row.Data);
        });
    }

    private async Task ReloadAsync()
    {
        await LoadPartitionTablesAsync();
        if (_selectedTable != null) await LoadPartitionDetailsAsync(_selectedTable);
    }

    private void NavigateBack() => Navigation.NavigateTo("/");
    private void ShowSourceServerInfo() => _sourceServerModalVisible = true;
    
    private async Task ShowTargetServerConfig()
    {
        // 从API加载当前目标服务器配置
        try
        {
            var dataSource = await PartitionInfoApi.GetDataSourceAsync(DataSourceId);
            if (dataSource != null)
            {
                _targetServerModel = new TargetServerConfigModel
                {
                    UseSourceAsTarget = dataSource.UseSourceAsTarget,
                    ServerAddress = dataSource.TargetServerAddress ?? "",
                    Port = dataSource.TargetServerPort,
                    DatabaseName = dataSource.TargetDatabaseName ?? "",
                    UseIntegratedSecurity = dataSource.TargetUseIntegratedSecurity,
                    UserName = dataSource.TargetUserName ?? "",
                    Password = "" // 安全起见不回显密码
                };
            }
            _targetServerModalVisible = true;
        }
        catch (Exception ex)
        {
            Message.Error($"加载目标服务器配置失败: {ex.Message}");
        }
    }
    private async Task ShowAddPartitionConfig()
    {
        _partitionConfigModalTitle = "添加分区配置";
        await InitializePartitionWizardAsync();
    }

    private void ShowEditPartitionConfig()
    {
        Message.Info("分区配置修改功能仍在规划中，敬请期待。");
    }
    private void ShowAddPartitionValue() => _addPartitionValueModalVisible = true;
    private void ShowSplitPartition() => _splitModalVisible = true;
    private void ShowMergePartition() => _mergeModalVisible = true;
    private void ShowSwitchPartition() => _switchModalVisible = true;
    private void ViewTableDetails(PartitionTableInfo table) { }
    
    private async Task TestTargetServerConnection()
    {
        _testingTargetConnection = true;
        _targetConnectionTestResult = "";
        _targetConnectionTestSuccess = false;

        try
        {
            // 验证必填字段
            if (string.IsNullOrWhiteSpace(_targetServerModel.ServerAddress))
            {
                _targetConnectionTestResult = "请输入服务器地址";
                _targetConnectionTestSuccess = false;
                return;
            }
            if (string.IsNullOrWhiteSpace(_targetServerModel.DatabaseName))
            {
                _targetConnectionTestResult = "请输入数据库名称";
                _targetConnectionTestSuccess = false;
                return;
            }
            if (!_targetServerModel.UseIntegratedSecurity && string.IsNullOrWhiteSpace(_targetServerModel.UserName))
            {
                _targetConnectionTestResult = "使用SQL身份验证时必须输入用户名";
                _targetConnectionTestSuccess = false;
                return;
            }

            // 调用 API 测试连接
            var testRequest = new TestConnectionRequest
            {
                ServerAddress = _targetServerModel.ServerAddress,
                ServerPort = _targetServerModel.Port,
                DatabaseName = _targetServerModel.DatabaseName,
                UseIntegratedSecurity = _targetServerModel.UseIntegratedSecurity,
                UserName = _targetServerModel.UserName,
                Password = _targetServerModel.Password
            };

            var result = await PartitionInfoApi.TestConnectionAsync(testRequest);
            _targetConnectionTestSuccess = result;
            _targetConnectionTestResult = result ? "连接成功！" : "连接失败，请检查配置";
        }
        catch (Exception ex)
        {
            _targetConnectionTestSuccess = false;
            _targetConnectionTestResult = $"连接失败: {ex.Message}";
        }
        finally
        {
            _testingTargetConnection = false;
        }
    }
    
    private async Task SaveTargetServerConfig()
    {
        try
        {
            // 验证表单
            if (!_targetServerModel.UseSourceAsTarget)
            {
                if (string.IsNullOrWhiteSpace(_targetServerModel.ServerAddress))
                {
                    Message.Warning("请输入目标服务器地址");
                    return;
                }
                if (string.IsNullOrWhiteSpace(_targetServerModel.DatabaseName))
                {
                    Message.Warning("请输入目标数据库名称");
                    return;
                }
                if (!_targetServerModel.UseIntegratedSecurity && string.IsNullOrWhiteSpace(_targetServerModel.UserName))
                {
                    Message.Warning("使用SQL Server身份验证时必须输入用户名");
                    return;
                }
            }

            // 调用API保存配置
            var request = new UpdateTargetServerConfigRequest
            {
                UseSourceAsTarget = _targetServerModel.UseSourceAsTarget,
                TargetServerAddress = _targetServerModel.ServerAddress,
                TargetServerPort = _targetServerModel.Port,
                TargetDatabaseName = _targetServerModel.DatabaseName,
                TargetUseIntegratedSecurity = _targetServerModel.UseIntegratedSecurity,
                TargetUserName = _targetServerModel.UserName,
                TargetPassword = _targetServerModel.Password
            };

            await PartitionInfoApi.UpdateTargetServerConfigAsync(DataSourceId, request);
            Message.Success("目标服务器配置已保存");
            _targetServerModalVisible = false;
        }
        catch (Exception ex)
        {
            Message.Error($"保存目标服务器配置失败: {ex.Message}");
        }
    }

    private async Task InitializePartitionWizardAsync()
    {
        _loadingPartitionWizard = true;
        _configWizard = new PartitionConfigWizardState();
        try
        {
            var allTables = await PartitionInfoApi.GetDatabaseTablesAsync(DataSourceId);
            if (allTables.Count == 0)
            {
                Message.Warning("当前数据源暂无可用于配置的用户表。");
                return;
            }

            _configWizard.TableOptions = allTables
                .Select(t => new PartitionTableOption(
                    $"{t.SchemaName}.{t.TableName}",
                    $"{t.SchemaName}.{t.TableName}",
                    t.SchemaName,
                    t.TableName,
                    null))
                .ToList();

            _configWizard.Form.StorageMode = PartitionStorageMode.PrimaryFilegroup;
            _configWizard.Form.FilegroupName = "PRIMARY";
            _configWizard.Form.TargetDatabaseName = _databaseName;
            _configWizard.Form.RequirePartitionColumnNotNull = false;
            _configWizard.Generator.StepDays = 1;
            _configWizard.CurrentStep = 0;

            var defaultOptionKey = _selectedTable is not null
                ? $"{_selectedTable.SchemaName}.{_selectedTable.TableName}"
                : _configWizard.TableOptions.First().Key;

            var databases = await PartitionInfoApi.GetTargetDatabasesAsync(DataSourceId);
            _configWizard.TargetDatabases = databases;
            var defaultDb = databases.FirstOrDefault(db => db.IsCurrent) ?? databases.FirstOrDefault();
            if (defaultDb is not null)
            {
                _configWizard.Form.TargetDatabaseName = defaultDb.Name;
            }

            // 获取默认数据文件目录并缓存
            var defaultPath = await PartitionInfoApi.GetDefaultFilePathAsync(DataSourceId);
            if (!string.IsNullOrWhiteSpace(defaultPath))
            {
                _configWizard.CachedDefaultFileDirectory = defaultPath;
                _configWizard.Form.DataFileDirectory = defaultPath;
            }

            await ApplyTableSelectionAsync(defaultOptionKey, resetNaming: true);
            ApplyStorageModeDefaults();
            _partitionConfigModalVisible = true;
        }
        catch (Exception ex)
        {
            Message.Error($"初始化分区配置向导失败: {ex.Message}");
            _partitionConfigModalVisible = false;
        }
        finally
        {
            _loadingPartitionWizard = false;
        }
    }

    private async Task ApplyTableSelectionAsync(string tableKey, bool resetNaming)
    {
        var option = _configWizard.TableOptions.FirstOrDefault(o => o.Key.Equals(tableKey, StringComparison.OrdinalIgnoreCase));
        if (option is null)
        {
            return;
        }

        _configWizard.Form.SourceTableKey = option.Key;
        _configWizard.Form.SchemaName = option.SchemaName;
        _configWizard.Form.TableName = option.TableName;

        if (resetNaming || string.IsNullOrWhiteSpace(_configWizard.Form.TargetSchemaName))
        {
            _configWizard.Form.TargetSchemaName = option.SchemaName;
        }

        if (resetNaming || string.IsNullOrWhiteSpace(_configWizard.Form.TargetTableName))
        {
            _configWizard.Form.TargetTableName = $"{option.TableName}_bak";
        }

        if (resetNaming || string.IsNullOrWhiteSpace(_configWizard.Form.FilegroupName))
        {
            _configWizard.Form.FilegroupName = "PRIMARY";
        }

        // 先清空分区列选择，避免显示上一个表的列名
        _configWizard.Form.PartitionColumn = string.Empty;
        _configWizard.Columns.Clear();
        _configWizard.Boundaries.Clear();
        
        await LoadColumnsForConfigAsync(option.SchemaName, option.TableName, option.PartitionColumn);
    }

    private async Task LoadColumnsForConfigAsync(string schemaName, string tableName, string? preferredColumn)
    {
        var columns = await PartitionInfoApi.GetTableColumnsAsync(DataSourceId, schemaName, tableName);
        if (columns.Count == 0)
        {
            throw new InvalidOperationException("未能读取分区列信息。");
        }

        _configWizard.Columns = columns;
        var defaultColumn = columns.FirstOrDefault(c => string.Equals(c.ColumnName, preferredColumn, StringComparison.OrdinalIgnoreCase))
                            ?? columns.FirstOrDefault();
        if (defaultColumn is null)
        {
            throw new InvalidOperationException("未能读取分区列信息。");
        }

        _configWizard.Form.PartitionColumn = defaultColumn.ColumnName;
        _configWizard.SelectedColumnIsNullable = defaultColumn.IsNullable;
        _configWizard.Form.RequirePartitionColumnNotNull = defaultColumn.IsNullable;
        _configWizard.ColumnKind = ResolveValueKind(defaultColumn);
        await LoadColumnStatisticsAsync(defaultColumn.ColumnName);
    }

        private async Task HandleSourceTableChanged(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return;
        }

        // 注意：value 已经通过 @bind-Value 自动绑定到 _configWizard.Form.SourceTableKey
        // 不需要重复赋值
        
        try
        {
            await ApplyTableSelectionAsync(value, resetNaming: true);
            ApplyStorageModeDefaults();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Message.Error($"加载分区元数据失败: {ex.Message}");
        }
    }

    private async Task LoadColumnStatisticsAsync(string columnName)
    {
        try
        {
            var stats = await PartitionInfoApi.GetColumnStatisticsAsync(DataSourceId, _configWizard.Form.SchemaName, _configWizard.Form.TableName, columnName);
            _configWizard.ColumnMinValue = stats?.MinValue;
            _configWizard.ColumnMaxValue = stats?.MaxValue;
        }
        catch
        {
            _configWizard.ColumnMinValue = null;
            _configWizard.ColumnMaxValue = null;
        }
    }

        private async Task HandlePartitionColumnChanged(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return;
        }

        // 注意：value 已经通过 @bind-Value 自动绑定到 _configWizard.Form.PartitionColumn
        // 不需要重复赋值
        
        var column = _configWizard.Columns.FirstOrDefault(c => string.Equals(c.ColumnName, value, StringComparison.OrdinalIgnoreCase));
        if (column is null)
        {
            return;
        }

        _configWizard.SelectedColumnIsNullable = column.IsNullable;
        _configWizard.Form.RequirePartitionColumnNotNull = column.IsNullable;
        _configWizard.ColumnKind = ResolveValueKind(column);
        _configWizard.Boundaries.Clear();
        _configWizard.ColumnMinValue = null;
        _configWizard.ColumnMaxValue = null;

        await LoadColumnStatisticsAsync(column.ColumnName);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnStorageModeChanged(PartitionStorageMode mode)
    {
        _configWizard.Form.StorageMode = mode;
        ApplyStorageModeDefaults();
        await InvokeAsync(StateHasChanged);
    }

    private void HandleFilegroupNameChanged()
    {
        // 当文件组名称改变时,自动更新文件名
        if (_configWizard.Form.StorageMode == PartitionStorageMode.DedicatedFilegroupSingleFile 
            && !string.IsNullOrWhiteSpace(_configWizard.Form.FilegroupName))
        {
            RegenerateDataFileName();
        }
    }

    private void RegenerateDataFileName()
    {
        var db = string.IsNullOrWhiteSpace(_configWizard.Form.TargetDatabaseName) ? _databaseName : _configWizard.Form.TargetDatabaseName;
        var fg = _configWizard.Form.FilegroupName ?? "FG";
        _configWizard.Form.DataFileName = $"{db}_{fg}_p{DateTime.UtcNow:yyyyMMddHHmm}.ndf";
    }

    private void ApplyStorageModeDefaults()
    {
        if (_configWizard.Form.StorageMode == PartitionStorageMode.DedicatedFilegroupSingleFile)
        {
            // 标记是否需要重新生成文件名
            var filegroupChanged = false;
            
            if (string.IsNullOrWhiteSpace(_configWizard.Form.FilegroupName) || string.Equals(_configWizard.Form.FilegroupName, "PRIMARY", StringComparison.OrdinalIgnoreCase))
            {
                _configWizard.Form.FilegroupName = $"{_configWizard.Form.TableName}_FG_{DateTime.UtcNow:yyyyMMdd}";
                filegroupChanged = true;
            }

            // 如果数据目录为空,使用缓存的默认路径
            if (string.IsNullOrWhiteSpace(_configWizard.Form.DataFileDirectory) && !string.IsNullOrWhiteSpace(_configWizard.CachedDefaultFileDirectory))
            {
                _configWizard.Form.DataFileDirectory = _configWizard.CachedDefaultFileDirectory;
            }

            // 如果文件组名称发生了变化,或者文件名为空,则重新生成文件名
            if (filegroupChanged || string.IsNullOrWhiteSpace(_configWizard.Form.DataFileName))
            {
                RegenerateDataFileName();
            }

            _configWizard.Form.InitialFileSizeMb ??= 512;
            _configWizard.Form.AutoGrowthMb ??= 128;
        }
        else
        {
            _configWizard.Form.FilegroupName = string.IsNullOrWhiteSpace(_configWizard.Form.FilegroupName) ? "PRIMARY" : _configWizard.Form.FilegroupName;
            _configWizard.Form.DataFileDirectory = null;
            _configWizard.Form.DataFileName = null;
            _configWizard.Form.InitialFileSizeMb = null;
            _configWizard.Form.AutoGrowthMb = null;
        }
    }

    private bool ValidatePartitionStepOne()
    {
        if (string.IsNullOrWhiteSpace(_configWizard.Form.SourceTableKey))
        {
            Message.Warning("请选择源表。");
            return false;
        }

        if (string.IsNullOrWhiteSpace(_configWizard.Form.PartitionColumn))
        {
            Message.Warning("请选择分区列。");
            return false;
        }

        if (string.IsNullOrWhiteSpace(_configWizard.Form.FilegroupName))
        {
            Message.Warning("请输入文件组名称。");
            return false;
        }

        if (!Regex.IsMatch(_configWizard.Form.FilegroupName, @"^[A-Za-z_][A-Za-z0-9_]*$"))
        {
            Message.Warning("文件组名称仅支持字母、数字与下划线，并以字母或下划线开头。");
            return false;
        }

        if (_configWizard.Form.StorageMode == PartitionStorageMode.DedicatedFilegroupSingleFile)
        {
            if (string.IsNullOrWhiteSpace(_configWizard.Form.DataFileDirectory))
            {
                Message.Warning("请输入数据文件目录。");
                return false;
            }

            if (string.IsNullOrWhiteSpace(_configWizard.Form.DataFileName))
            {
                Message.Warning("请输入数据文件名称。");
                return false;
            }

            if (!Regex.IsMatch(_configWizard.Form.DataFileName, @"^[A-Za-z0-9_\-\.]+$"))
            {
                Message.Warning("数据文件名称仅支持字母、数字、下划线、短横线与点号。");
                return false;
            }

            if (!_configWizard.Form.InitialFileSizeMb.HasValue || _configWizard.Form.InitialFileSizeMb <= 0)
            {
                Message.Warning("请填写有效的初始大小。");
                return false;
            }

            if (!_configWizard.Form.AutoGrowthMb.HasValue || _configWizard.Form.AutoGrowthMb <= 0)
            {
                Message.Warning("请填写有效的自动增长大小。");
                return false;
            }
        }

        if (string.IsNullOrWhiteSpace(_configWizard.Form.TargetDatabaseName))
        {
            Message.Warning("请选择目标数据库。");
            return false;
        }

        if (string.IsNullOrWhiteSpace(_configWizard.Form.TargetSchemaName))
        {
            Message.Warning("请输入目标架构。");
            return false;
        }

        if (!Regex.IsMatch(_configWizard.Form.TargetSchemaName, @"^[A-Za-z_][A-Za-z0-9_]*$"))
        {
            Message.Warning("目标架构仅支持字母、数字与下划线，并以字母或下划线开头。");
            return false;
        }

        if (string.IsNullOrWhiteSpace(_configWizard.Form.TargetTableName))
        {
            Message.Warning("请输入目标表名。");
            return false;
        }

        if (!Regex.IsMatch(_configWizard.Form.TargetTableName, @"^[A-Za-z_][A-Za-z0-9_]*$"))
        {
            Message.Warning("目标表名仅支持字母、数字与下划线，并以字母或下划线开头。");
            return false;
        }

        return true;
    }

    private bool ValidatePartitionStepTwo()
    {
        if (_configWizard.Boundaries.Count == 0)
        {
            Message.Warning("请至少添加一个分区边界值。");
            return false;
        }

        return true;
    }

    private void NextPartitionStep()
    {
        if (_configWizard.CurrentStep == 0 && ValidatePartitionStepOne())
        {
            _configWizard.CurrentStep = 1;
        }
    }

    private void PrevPartitionStep()
    {
        if (_configWizard.CurrentStep > 0)
        {
            _configWizard.CurrentStep--;
        }
    }

    private void ClosePartitionWizard()
    {
        _partitionConfigModalVisible = false;
    }

    private void AddManualBoundary()
    {
        if (!TryParseBoundaryValue(_configWizard.NewBoundaryValue, out var partitionValue, out var error))
        {
            if (!string.IsNullOrEmpty(error))
            {
                Message.Warning(error);
            }

            return;
        }

        var invariant = partitionValue.ToInvariantString();
        if (_configWizard.Boundaries.Any(x => x.DisplayValue.Equals(invariant, StringComparison.Ordinal)))
        {
            Message.Warning("该边界值已存在。");
            _configWizard.NewBoundaryValue = string.Empty;
            return;
        }

        _configWizard.Boundaries.Add(new PartitionBoundaryItem(partitionValue));
        _configWizard.NewBoundaryValue = string.Empty;
    }

    private void RemoveBoundary(Guid id)
    {
        var target = _configWizard.Boundaries.FirstOrDefault(x => x.Id == id);
        if (target is not null)
        {
            _configWizard.Boundaries.Remove(target);
        }
    }

    private void ClearBoundaryValues()
    {
        _configWizard.Boundaries.Clear();
    }

    private void GenerateNumericBoundaries()
    {
        if (_configWizard.ColumnKind is not (PartitionValueKind.Int or PartitionValueKind.BigInt))
        {
            return;
        }

        if (!long.TryParse(_configWizard.Generator.StartValue, NumberStyles.Integer, CultureInfo.InvariantCulture, out var start))
        {
            Message.Warning("请输入有效的起始值。");
            return;
        }

        if (!long.TryParse(_configWizard.Generator.EndValue, NumberStyles.Integer, CultureInfo.InvariantCulture, out var end))
        {
            Message.Warning("请输入有效的结束值。");
            return;
        }

        if (!long.TryParse(_configWizard.Generator.StepValue, NumberStyles.Integer, CultureInfo.InvariantCulture, out var step) || step <= 0)
        {
            Message.Warning("请输入有效的步长。");
            return;
        }

        if (end <= start)
        {
            Message.Warning("结束值必须大于起始值。");
            return;
        }

        var values = new List<PartitionValue>();
        for (var current = start; current <= end; current += step)
        {
            if (_configWizard.ColumnKind == PartitionValueKind.Int)
            {
                if (current > int.MaxValue || current < int.MinValue)
                {
                    break;
                }

                values.Add(PartitionValue.FromInt((int)current));
            }
            else
            {
                values.Add(PartitionValue.FromBigInt(current));
            }
        }

        AddBoundaryItems(values);
    }

    private void GenerateDateBoundaries()
    {
        if (!IsDateKind)
        {
            return;
        }

        if (!_configWizard.Generator.StartDate.HasValue || !_configWizard.Generator.EndDate.HasValue)
        {
            Message.Warning("请选择起始和结束日期。");
            return;
        }

        var start = _configWizard.Generator.StartDate.Value;
        var end = _configWizard.Generator.EndDate.Value;
        var stepDays = _configWizard.Generator.StepDays;

        if (stepDays <= 0)
        {
            Message.Warning("步长必须大于 0。");
            return;
        }

        if (end <= start)
        {
            Message.Warning("结束时间必须晚于起始时间。");
            return;
        }

        var values = new List<PartitionValue>();
        var current = start;

        while (current <= end)
        {
            var value = _configWizard.ColumnKind switch
            {
                PartitionValueKind.Date => PartitionValue.FromDate(DateOnly.FromDateTime(current)),
                PartitionValueKind.DateTime => PartitionValue.FromDateTime(current),
                PartitionValueKind.DateTime2 => PartitionValue.FromDateTime2(current),
                _ => PartitionValue.FromDateTime(current)
            };

            values.Add(value);
            current = current.AddDays(stepDays);
        }

        AddBoundaryItems(values);
    }

    private void AddBoundaryItems(IEnumerable<PartitionValue> values)
    {
        var existing = new HashSet<string>(_configWizard.Boundaries.Select(x => x.DisplayValue), StringComparer.Ordinal);
        foreach (var value in values)
        {
            var invariant = value.ToInvariantString();
            if (existing.Add(invariant))
            {
                _configWizard.Boundaries.Add(new PartitionBoundaryItem(value));
            }
        }
    }

    private bool TryParseBoundaryValue(string? input, out PartitionValue value, out string error)
    {
        value = null!;
        error = string.Empty;

        if (string.IsNullOrWhiteSpace(input))
        {
            error = "边界值不能为空。";
            return false;
        }

        var raw = input.Trim();

        try
        {
            switch (_configWizard.ColumnKind)
            {
                case PartitionValueKind.Int:
                    if (!int.TryParse(raw, NumberStyles.Integer, CultureInfo.InvariantCulture, out var intValue))
                    {
                        error = "请输入有效的整数边界值。";
                        return false;
                    }

                    value = PartitionValue.FromInt(intValue);
                    break;

                case PartitionValueKind.BigInt:
                    if (!long.TryParse(raw, NumberStyles.Integer, CultureInfo.InvariantCulture, out var longValue))
                    {
                        error = "请输入有效的整数边界值。";
                        return false;
                    }

                    value = PartitionValue.FromBigInt(longValue);
                    break;

                case PartitionValueKind.Date:
                    if (!DateOnly.TryParse(raw, CultureInfo.InvariantCulture, out var dateValue))
                    {
                        error = "请输入有效的日期（yyyy-MM-dd）。";
                        return false;
                    }

                    value = PartitionValue.FromDate(dateValue);
                    break;

                case PartitionValueKind.DateTime:
                    if (!DateTime.TryParse(raw, CultureInfo.InvariantCulture, DateTimeStyles.None, out var dateTimeValue))
                    {
                        error = "请输入有效的时间（yyyy-MM-dd HH:mm:ss）。";
                        return false;
                    }

                    value = PartitionValue.FromDateTime(dateTimeValue);
                    break;

                case PartitionValueKind.DateTime2:
                    if (!DateTime.TryParse(raw, CultureInfo.InvariantCulture, DateTimeStyles.None, out var dateTime2Value))
                    {
                        error = "请输入有效的时间（yyyy-MM-dd HH:mm:ss.fffffff）。";
                        return false;
                    }

                    value = PartitionValue.FromDateTime2(dateTime2Value);
                    break;

                case PartitionValueKind.Guid:
                    if (!Guid.TryParse(raw, out var guidValue))
                    {
                        error = "请输入有效的 GUID。";
                        return false;
                    }

                    value = PartitionValue.FromGuid(guidValue);
                    break;

                default:
                    value = PartitionValue.FromString(raw);
                    break;
            }

            return true;
        }
        catch (Exception ex)
        {
            error = $"解析边界值失败: {ex.Message}";
            return false;
        }
    }

    private List<string> PrepareBoundaryValues()
    {
        var unique = new Dictionary<string, PartitionBoundaryItem>(StringComparer.Ordinal);
        foreach (var item in _configWizard.Boundaries)
        {
            unique[item.DisplayValue] = item;
        }

        var ordered = unique.Values.ToList();
        ordered.Sort((left, right) => left.Value.CompareTo(right.Value));
        return ordered.Select(x => x.Value.ToInvariantString()).ToList();
    }

    private bool SupportsAutoGeneration =>
        _configWizard.ColumnKind is PartitionValueKind.Int or PartitionValueKind.BigInt or PartitionValueKind.Date or PartitionValueKind.DateTime or PartitionValueKind.DateTime2;

    private bool IsDateKind =>
        _configWizard.ColumnKind is PartitionValueKind.Date or PartitionValueKind.DateTime or PartitionValueKind.DateTime2;

    private async Task SubmitPartitionConfigurationAsync()
    {
        if (!ValidatePartitionStepTwo())
        {
            return;
        }

        var boundaryValues = PrepareBoundaryValues();
        if (boundaryValues.Count == 0)
        {
            Message.Warning("未找到有效的分区边界值。");
            return;
        }

        _submittingPartitionConfig = true;
        try
        {
            var createRequest = new CreatePartitionConfigurationRequestModel
            {
                DataSourceId = DataSourceId,
                SchemaName = _configWizard.Form.SchemaName,
                TableName = _configWizard.Form.TableName,
                StorageMode = _configWizard.Form.StorageMode,
                FilegroupName = _configWizard.Form.FilegroupName,
                DataFileDirectory = _configWizard.Form.StorageMode == PartitionStorageMode.DedicatedFilegroupSingleFile ? _configWizard.Form.DataFileDirectory : null,
                DataFileName = _configWizard.Form.StorageMode == PartitionStorageMode.DedicatedFilegroupSingleFile ? _configWizard.Form.DataFileName : null,
                InitialFileSizeMb = _configWizard.Form.StorageMode == PartitionStorageMode.DedicatedFilegroupSingleFile ? _configWizard.Form.InitialFileSizeMb : null,
                AutoGrowthMb = _configWizard.Form.StorageMode == PartitionStorageMode.DedicatedFilegroupSingleFile ? _configWizard.Form.AutoGrowthMb : null,
                TargetDatabaseName = _configWizard.Form.TargetDatabaseName,
                TargetSchemaName = _configWizard.Form.TargetSchemaName,
                TargetTableName = _configWizard.Form.TargetTableName,
                RequirePartitionColumnNotNull = _configWizard.Form.RequirePartitionColumnNotNull,
                CreatedBy = string.IsNullOrWhiteSpace(AdminSession.UserName) ? "SYSTEM" : AdminSession.UserName!,
                Remarks = _configWizard.Form.Remarks
            };

            var createResult = await PartitionConfigApi.CreateAsync(createRequest);
            if (!createResult.IsSuccess)
            {
                Message.Error(createResult.Error ?? "创建分区配置失败。");
                return;
            }

            var replaceRequest = new ReplacePartitionValuesRequestModel
            {
                BoundaryValues = boundaryValues,
                UpdatedBy = string.IsNullOrWhiteSpace(AdminSession.UserName) ? "SYSTEM" : AdminSession.UserName!
            };

            var replaceResult = await PartitionConfigApi.ReplaceValuesAsync(createResult.Value, replaceRequest);
            if (!replaceResult.IsSuccess)
            {
                Message.Error(replaceResult.Error ?? "保存分区边界值失败。");
                return;
            }

            _configWizard.ConfigurationId = createResult.Value;
            _configWizard.CurrentStep = 2;
            await LoadPartitionTablesAsync();
            Message.Success("分区配置创建成功。");
        }
        catch (Exception ex)
        {
            Message.Error($"提交分区配置失败: {ex.Message}");
        }
        finally
        {
            _submittingPartitionConfig = false;
        }
    }

    private void OnBoundaryInputKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            AddManualBoundary();
        }
    }

    private PartitionValueKind ResolveValueKind(PartitionTableColumnDto column)
    {
        return column.DataType.ToLowerInvariant() switch
        {
            "int" => PartitionValueKind.Int,
            "bigint" => PartitionValueKind.BigInt,
            "date" => PartitionValueKind.Date,
            "datetime" => PartitionValueKind.DateTime,
            "datetime2" => PartitionValueKind.DateTime2,
            "uniqueidentifier" => PartitionValueKind.Guid,
            _ => PartitionValueKind.String
        };
    }

    /// <summary>
    /// 格式化列统计值显示,对日期时间类型进行格式化。
    /// </summary>
    private string FormatColumnStatValue(string? value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return "-";
        }

        // 如果当前列是日期时间类型,尝试格式化显示
        if (_configWizard.ColumnKind is PartitionValueKind.Date or PartitionValueKind.DateTime or PartitionValueKind.DateTime2)
        {
            if (DateTime.TryParse(value, out var dateTime))
            {
                // Date 类型只显示日期部分
                if (_configWizard.ColumnKind == PartitionValueKind.Date)
                {
                    return dateTime.ToString("yyyy-MM-dd");
                }
                // DateTime 和 DateTime2 显示完整日期时间
                return dateTime.ToString("yyyy-MM-dd HH:mm:ss");
            }
        }

        return value;
    }

    private Task SavePartitionValue() { _addPartitionValueModalVisible = false; return Task.CompletedTask; }
    private Task ExecuteSplit() { _splitModalVisible = false; return Task.CompletedTask; }
    private Task ExecuteMerge() { _mergeModalVisible = false; return Task.CompletedTask; }
    private Task ExecuteSwitch() { _switchModalVisible = false; return Task.CompletedTask; }

    private class PartitionConfigWizardState
    {
        public int CurrentStep { get; set; }
        public PartitionConfigForm Form { get; } = new();
        public List<PartitionTableColumnDto> Columns { get; set; } = new();
        public List<TargetDatabaseDto> TargetDatabases { get; set; } = new();
        public List<PartitionTableOption> TableOptions { get; set; } = new();
        public List<PartitionBoundaryItem> Boundaries { get; set; } = new();
        public string? ColumnMinValue { get; set; }
        public string? ColumnMaxValue { get; set; }
        public PartitionValueKind ColumnKind { get; set; } = PartitionValueKind.String;
        public bool SelectedColumnIsNullable { get; set; }
        public string NewBoundaryValue { get; set; } = string.Empty;
        public BoundaryGeneratorModel Generator { get; } = new();
        public Guid? ConfigurationId { get; set; }
        
        /// <summary>缓存的默认数据文件目录,从源服务器获取。</summary>
        public string? CachedDefaultFileDirectory { get; set; }
    }

    private class PartitionConfigForm
    {
        public string SourceTableKey { get; set; } = string.Empty;
        public string SchemaName { get; set; } = string.Empty;
        public string TableName { get; set; } = string.Empty;
        public string PartitionColumn { get; set; } = string.Empty;
        public bool RequirePartitionColumnNotNull { get; set; }
        public PartitionStorageMode StorageMode { get; set; } = PartitionStorageMode.PrimaryFilegroup;
        public string? FilegroupName { get; set; }
        public string? DataFileDirectory { get; set; }
        public string? DataFileName { get; set; }
        public int? InitialFileSizeMb { get; set; }
        public int? AutoGrowthMb { get; set; }
        public string TargetDatabaseName { get; set; } = string.Empty;
        public string? TargetSchemaName { get; set; }
        public string TargetTableName { get; set; } = string.Empty;
        public string? Remarks { get; set; }
    }

    private class BoundaryGeneratorModel
    {
        public string? StartValue { get; set; }
        public string? EndValue { get; set; }
        public string? StepValue { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public int StepDays { get; set; } = 1;
    }

    private class PartitionBoundaryItem
    {
        public PartitionBoundaryItem(PartitionValue value)
        {
            Value = value;
        }

        public Guid Id { get; } = Guid.NewGuid();
        public PartitionValue Value { get; }
        public string DisplayValue => Value.ToInvariantString();
    }

    private sealed class PartitionTableOption
    {
        public PartitionTableOption(string key, string label, string schemaName, string tableName, string? partitionColumn)
        {
            Key = key;
            Label = label;
            SchemaName = schemaName;
            TableName = tableName;
            PartitionColumn = partitionColumn;
        }

        public string Key { get; }
        public string Label { get; }
        public string SchemaName { get; }
        public string TableName { get; }
        public string? PartitionColumn { get; }
    }

    private class PartitionTableInfo
    {
        public string SchemaName { get; set; } = "";
        public string TableName { get; set; } = "";
        public string PartitionFunction { get; set; } = "";
        public string PartitionScheme { get; set; } = "";
        public string PartitionColumn { get; set; } = "";
        public string DataType { get; set; } = "";
        public int TotalPartitions { get; set; }
        public bool IsRangeRight { get; set; }
    }

    private class PartitionDetailInfo
    {
        public int PartitionNumber { get; set; }
        public string BoundaryValue { get; set; } = "";
        public string RangeType { get; set; } = "";
        public string FilegroupName { get; set; } = "";
        public long RowCount { get; set; }
        public decimal TotalSpaceMB { get; set; }
        public string DataCompression { get; set; } = "NONE";
        public DateTime CreatedDate { get; set; }
    }

    private static string FormatBoundaryValue(string value, string? dataType)
    {
        if (string.IsNullOrWhiteSpace(value) || string.Equals(value, "N/A", StringComparison.OrdinalIgnoreCase))
        {
            return value;
        }

        if (string.IsNullOrWhiteSpace(dataType))
        {
            return value;
        }

        var normalizedType = dataType.ToLowerInvariant();
        if (normalizedType is "date" or "datetime" or "datetime2" or "smalldatetime" or "datetimeoffset")
        {
            var trimmed = value.Trim();
            if (DateTime.TryParse(trimmed, CultureInfo.InvariantCulture, DateTimeStyles.AllowWhiteSpaces | DateTimeStyles.AssumeLocal, out var parsed) ||
                DateTime.TryParse(trimmed, CultureInfo.CurrentCulture, DateTimeStyles.AllowWhiteSpaces, out parsed))
            {
                return parsed.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
            }
        }

        return value;
    }

    /// <summary>
    /// 目标服务器配置表单模型
    /// </summary>
    private class TargetServerConfigModel
    {
        /// <summary>
        /// 是否使用源服务器作为目标服务器
        /// </summary>
        public bool UseSourceAsTarget { get; set; } = true;

        /// <summary>
        /// 目标服务器地址
        /// </summary>
        public string ServerAddress { get; set; } = "";

        /// <summary>
        /// 目标服务器端口
        /// </summary>
        public int Port { get; set; } = 1433;

        /// <summary>
        /// 目标数据库名称
        /// </summary>
        public string DatabaseName { get; set; } = "";

        /// <summary>
        /// 是否使用集成认证
        /// </summary>
        public bool UseIntegratedSecurity { get; set; } = true;

        /// <summary>
        /// 用户名
        /// </summary>
        public string UserName { get; set; } = "";

        /// <summary>
        /// 密码
        /// </summary>
        public string Password { get; set; } = "";
    }
}





