@page "/archive-data-sources/{DataSourceId:guid}/partitions"
@attribute [ReuseTabsPage(Title = "分区管理", Closable = true)]
@using AntDesign
@using AntDesign.TableModels
@using System.Globalization
@using System.Linq
@using DbArchiveTool.Application.Partitions
@using DbArchiveTool.Web.Components
@using DbArchiveTool.Web.Core
@using DbArchiveTool.Web.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@inject PartitionInfoApiClient PartitionInfoApi
@inject PartitionConfigurationApiClient PartitionConfigApi
@inject MessageService Message
@inject NavigationManager Navigation

<PageTitle>分区管理</PageTitle>

<PageHeader Title="分区表管理" OnBack="NavigateBack">
    <PageHeaderExtra>
        <div class="header-actions">
            <Button Type="@ButtonType.Default" Icon="database" OnClick="ShowSourceServerInfo">源服务器信息</Button>
            <Button Type="@ButtonType.Default" Icon="setting" OnClick="ShowTargetServerConfig">目标服务器配置</Button>
            <Button Type="@ButtonType.Primary" Icon="reload" Loading="_loading" OnClick="ReloadAsync">刷新</Button>
        </div>
    </PageHeaderExtra>
    <PageHeaderContent>
        <div class="server-info">
            <Descriptions Size="@DescriptionsSize.Small" Column="3">
                <DescriptionsItem Title="数据源">@_dataSourceName</DescriptionsItem>
                <DescriptionsItem Title="服务器">@_serverAddress</DescriptionsItem>
                <DescriptionsItem Title="数据库">@_databaseName</DescriptionsItem>
            </Descriptions>
        </div>
    </PageHeaderContent>
</PageHeader>

<div class="partition-container">
    <div class="partition-tables-section">
        <div class="section-header">
            <h3>分区表配置</h3>
            <Space>
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" Icon="plus" Size="@ButtonSize.Small" OnClick="ShowAddPartitionConfig">添加分区配置</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Default"
                            Icon="edit"
                            Size="@ButtonSize.Small"
                            Disabled="@(!CanEditDraft)"
                            OnClick="EditSelectedDraftAsync">修改分区配置</Button>
                </SpaceItem>
            </Space>
        </div>

        <Tabs @bind-ActiveKey="_activeTab" OnChange="OnTabChanged">
            <TabPane Key="partitioned" Tab="已分区表">
                <Table TItem="PartitionTableInfo"
                       DataSource="_partitionTables"
                       Loading="_loading"
                       Size="@TableSize.Small"
                       Bordered
                       @bind-SelectedRows="_selectedTableRows"
                       OnRowClick="OnTableRowClick"
                       RowClassName="@GetPartitionRowClass">
                    <Selection Key="@(context.TableName)" Type="@SelectionType.Radio" />
                    <PropertyColumn Property="c => c.SchemaName" Title="架构名" Sortable />
                    <PropertyColumn Property="c => c.TableName" Title="表名" Sortable />
                    <PropertyColumn Property="c => c.PartitionFunction" Title="分区函数" />
                    <PropertyColumn Property="c => c.PartitionScheme" Title="分区方案" />
                    <PropertyColumn Property="c => c.PartitionColumn" Title="分区列" />
                    <PropertyColumn Property="c => c.DataType" Title="数据类型" />
                    <PropertyColumn Property="c => c.TotalPartitions" Title="分区数" Sortable />
                    <PropertyColumn Property="c => c.IsRangeRight" Title="分区类型">
                        <Template>
                            <Tag Color="@(context.IsRangeRight ? "blue" : "green")">@(context.IsRangeRight ? "RIGHT" : "LEFT")</Tag>
                        </Template>
                    </PropertyColumn>
                    <ActionColumn Title="操作">
                        <Space Size="@("small")">
                            <SpaceItem>
                                <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" OnClick="() => ViewTableDetails(context)">详情</Button>
                            </SpaceItem>
                        </Space>
                    </ActionColumn>
                </Table>
            </TabPane>

            <TabPane Key="drafts" Tab="配置草稿">
                <Table TItem="ConfigurationDraftInfo"
                       DataSource="_configurationDrafts"
                       Loading="_loadingDrafts"
                       Size="@TableSize.Small"
                       Bordered
                       @bind-SelectedRows="_selectedDraftRows"
                       OnRowClick="OnDraftRowClick"
                       RowClassName="@GetDraftRowClass">
                    <Selection Key="@(context.Id.ToString())" Type="@SelectionType.Radio" />
                    <PropertyColumn Property="c => c.SchemaName" Title="架构名" Sortable />
                    <PropertyColumn Property="c => c.TableName" Title="表名" Sortable />
                    <PropertyColumn Property="c => c.PartitionColumnName" Title="分区列" />
                    <PropertyColumn Property="c => c.PartitionFunctionName" Title="分区函数" />
                    <PropertyColumn Property="c => c.PartitionSchemeName" Title="分区方案" />
                    <PropertyColumn Property="c => c.BoundaryCount" Title="边界值数" Sortable />
                    <PropertyColumn Property="c => c.StorageMode" Title="存储模式">
                        <Template>
                            <Tag Color="@(context.StorageMode == "DedicatedFilegroupSingleFile" ? "purple" : "blue")">
                                @(context.StorageMode == "DedicatedFilegroupSingleFile" ? "专用文件组" : "使用PRIMARY")
                            </Tag>
                        </Template>
                    </PropertyColumn>
                    <PropertyColumn Property="c => c.CreatedAtUtc" Title="创建时间" Format="yyyy-MM-dd HH:mm" />
                    <PropertyColumn Property="c => c.CreatedBy" Title="创建人" />
                    <ActionColumn Title="操作">
                        <Space Size="@("small")">
                            <SpaceItem>
                                <Button Type="@ButtonType.Link"
                                        Size="@ButtonSize.Small"
                                        Disabled="@(context.IsCommitted || context.IsPartitioned)"
                                        OnClick="() => EditConfigurationDraftAsync(context)">编辑</Button>
                            </SpaceItem>
                            <SpaceItem>
                                <Popconfirm Title="确定要删除此配置草稿吗？"
                                            OnConfirm="() => DeleteConfigurationDraftAsync(context.Id)"
                                            OkText="删除"
                                            CancelText="取消">
                                    <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" Danger>删除</Button>
                                </Popconfirm>
                            </SpaceItem>
                        </Space>
                    </ActionColumn>
                </Table>
            </TabPane>
        </Tabs>
    </div>

    <div class="partition-details-section">
        <div class="section-header">
            <h3>分区边界值明细 @(_selectedTable != null ? $"- {_selectedTable.SchemaName}.{_selectedTable.TableName}" : "")</h3>
            <Space>
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" Icon="plus" Size="@ButtonSize.Small" Disabled="@(_selectedTable == null)" OnClick="ShowAddPartitionValue">添加分区值</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Default" Icon="scissor" Size="@ButtonSize.Small" Disabled="@(_selectedTable == null || _selectedPartitionRows.Count() == 0)" OnClick="ShowSplitPartition">拆分分区</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Default" Icon="merge-cells" Size="@ButtonSize.Small" Disabled="@(_selectedTable == null || _selectedPartitionRows.Count() == 0)" OnClick="ShowMergePartition">合并分区</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Default" Icon="swap" Size="@ButtonSize.Small" Disabled="@(_selectedTable == null || _selectedPartitionRows.Count() == 0)" OnClick="ShowSwitchPartition">切换分区</Button>
                </SpaceItem>
            </Space>
        </div>

        @if (_selectedTable == null)
        {
            <Empty Description="@("请先选择一个分区表")" />
        }
        else
        {
            <Table TItem="PartitionDetailInfo"
                   DataSource="_partitionDetails"
                   Loading="_loadingDetails"
                   Size="@TableSize.Small"
                   Bordered
                   @bind-SelectedRows="_selectedPartitionRows">
                <Selection Key="@(context.PartitionNumber.ToString())" />
                <PropertyColumn Property="c => c.PartitionNumber" Title="分区号" Sortable DefaultSortOrder="@SortDirection.Ascending" />
                <PropertyColumn Property="c => c.BoundaryValue" Title="边界值" />
                <PropertyColumn Property="c => c.RangeType" Title="范围类型">
                    <Template>
                        <Tag Color="@(context.RangeType == "RIGHT" ? "blue" : "green")">@context.RangeType</Tag>
                    </Template>
                </PropertyColumn>
                <PropertyColumn Property="c => c.FilegroupName" Title="文件组" />
                <PropertyColumn Property="c => c.RowCount" Title="行数" Sortable />
                <PropertyColumn Property="c => c.TotalSpaceMB" Title="空间(MB)" Sortable />
                <PropertyColumn Property="c => c.DataCompression" Title="压缩">
                    <Template>
                        <Tag Color="@(context.DataCompression == "NONE" ? "default" : "cyan")">@context.DataCompression</Tag>
                    </Template>
                </PropertyColumn>
                <PropertyColumn Property="c => c.CreatedDate" Title="创建时间" Format="yyyy-MM-dd HH:mm" />
            </Table>
        }
    </div>
</div>

<Modal Title="源服务器信息" @bind-Visible="_sourceServerModalVisible" Footer="null" Width="600">
    <Descriptions Bordered Column="1" Size="@DescriptionsSize.Small">
        <DescriptionsItem Title="服务器地址">@_serverAddress</DescriptionsItem>
        <DescriptionsItem Title="端口">@_serverPort</DescriptionsItem>
        <DescriptionsItem Title="数据库">@_databaseName</DescriptionsItem>
        <DescriptionsItem Title="认证方式">@(_useIntegratedSecurity ? "Windows 集成" : $"SQL 登录 ({_userName})")</DescriptionsItem>
        <DescriptionsItem Title="连接状态">
            <Tag Color="@(_isConnected ? "success" : "error")">@(_isConnected ? "已连接" : "未连接")</Tag>
        </DescriptionsItem>
    </Descriptions>
</Modal>

<Modal Title="目标服务器配置" @bind-Visible="_targetServerModalVisible" Width="720" OnOk="SaveTargetServerConfig" OnCancel="() => _targetServerModalVisible = false">
    <Form Model="_targetServerModel" LabelColSpan="6" WrapperColSpan="18">
        <FormItem Label="目标服务器">
            <Switch CheckedChildren="使用源服务器" UnCheckedChildren="自定义配置" @bind-Checked="_targetServerModel.UseSourceAsTarget" />
            <span style="margin-left: 12px; color: #8c8c8c; font-size: 13px;">
                @(_targetServerModel.UseSourceAsTarget ? "归档数据将保存在源服务器" : "归档数据将保存在自定义目标服务器")
            </span>
        </FormItem>

        @if (!_targetServerModel.UseSourceAsTarget)
        {
            <Divider>目标服务器信息</Divider>

            <FormItem Label="服务器地址" Required>
                <Input @bind-Value="_targetServerModel.ServerAddress" Placeholder="例如: localhost 或 192.168.1.100" />
            </FormItem>

            <FormItem Label="端口">
                <AntDesign.InputNumber @bind-Value="_targetServerModel.Port" Min="1" Max="65535" DefaultValue="1433" Style="width: 100%;" />
            </FormItem>

            <FormItem Label="数据库名称" Required>
                <Input @bind-Value="_targetServerModel.DatabaseName" Placeholder="目标数据库名称" />
            </FormItem>

            <FormItem Label="认证方式">
                <Switch CheckedChildren="Windows" UnCheckedChildren="SQL 登录" @bind-Checked="_targetServerModel.UseIntegratedSecurity" />
            </FormItem>

            <FormItem Label="登录账号" Required="@(!_targetServerModel.UseIntegratedSecurity)">
                <Input @bind-Value="_targetServerModel.UserName" Disabled="_targetServerModel.UseIntegratedSecurity" Placeholder="SQL 登录账号" />
            </FormItem>

            <FormItem Label="登录密码">
                <InputPassword @bind-Value="_targetServerModel.Password" Disabled="_targetServerModel.UseIntegratedSecurity" Placeholder="留空表示不修改原密码" VisibilityToggle="true" />
            </FormItem>

            <FormItem Label="连接测试">
                <div style="display: flex; align-items: center; gap: 12px;">
                    <Button Type="ButtonType.Default" Icon="api" Loading="_testingTargetConnection" OnClick="TestTargetServerConnection">测试连接</Button>
                    @if (!string.IsNullOrEmpty(_targetConnectionTestResult))
                    {
                        <span style="color: @(_targetConnectionTestSuccess ? "#52c41a" : "#ff4d4f"); font-weight: 500;">
                            @(_targetConnectionTestSuccess ? "✓" : "✗") @_targetConnectionTestResult
                        </span>
                    }
                </div>
            </FormItem>
        }
    </Form>
</Modal>

<PartitionConfigWizard Visible="_partitionConfigModalVisible"
                       VisibleChanged="HandlePartitionWizardVisibleChanged"
                       Title="@PartitionConfigModalTitle"
                       DataSourceId="DataSourceId"
                       DatabaseName="_databaseName"
                       SelectedTable="_selectedTable"
                       IsEditMode="_partitionConfigWizardIsEdit"
                       EditingConfigurationId="_editingConfigurationId"
                       EditingConfiguration="_editingConfigurationDetail"
                       OnCompleted="OnPartitionConfigCompletedAsync" />

<Modal Title="添加分区边界值" @bind-Visible="_addPartitionValueModalVisible" Width="600" OnOk="() => _addPartitionValueModalVisible = false" OnCancel="() => _addPartitionValueModalVisible = false">
    <Alert Type="@AlertType.Info" Message="添加分区值功能开发中" ShowIcon="true" />
</Modal>

<Modal Title="拆分分区" @bind-Visible="_splitModalVisible" Width="720" OnOk="() => _splitModalVisible = false" OnCancel="() => _splitModalVisible = false">
    <Alert Type="@AlertType.Info" Message="拆分分区功能开发中" ShowIcon="true" />
</Modal>

<Modal Title="合并分区" @bind-Visible="_mergeModalVisible" Width="720" OnOk="() => _mergeModalVisible = false" OnCancel="() => _mergeModalVisible = false">
    <Alert Type="@AlertType.Info" Message="合并分区功能开发中" ShowIcon="true" />
</Modal>

<Modal Title="切换分区" @bind-Visible="_switchModalVisible" Width="720" OnOk="() => _switchModalVisible = false" OnCancel="() => _switchModalVisible = false">
    <Alert Type="@AlertType.Info" Message="切换分区功能开发中" ShowIcon="true" />
</Modal>

<style>
    .partition-container { display: flex; flex-direction: column; gap: 16px; padding: 16px; height: calc(100vh - 200px); }
    .partition-tables-section { flex: 0 0 auto; max-height: 40%; overflow: auto; background: white; padding: 16px; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.05); }
    .partition-details-section { flex: 1 1 auto; overflow: auto; background: white; padding: 16px; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.05); }
    .section-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; padding-bottom: 12px; border-bottom: 1px solid #f0f0f0; }
    .partition-wizard-body { margin-top: 16px; }
    .wizard-step { padding-top: 16px; }
    .wizard-step .form-tip { color: #8c8c8c; font-size: 12px; }
    .boundary-actions { margin-top: 12px; display: flex; gap: 12px; align-items: center; }
    .partition-wizard-footer { margin-top: 24px; text-align: right; }
    .wizard-summary { list-style: none; padding-left: 0; margin: 16px 0 0; }
    .wizard-summary li { margin-bottom: 6px; }
    .section-header h3 { margin: 0; font-size: 16px; font-weight: 600; color: #262626; }
    .header-actions { display: flex; gap: 8px; }
    .server-info { margin-top: 12px; }
    .table-row-selected { background-color: #e6f7ff !important; }
    ::deep .ant-table-tbody > tr:hover > td { cursor: pointer; }
</style>

@code {
    [Parameter] public Guid DataSourceId { get; set; }
    private string _dataSourceName = "加载中...";
    private string _serverAddress = "";
    private int _serverPort = 1433;
    private string _databaseName = "";
    private bool _useIntegratedSecurity = true;
    private string _userName = "";
    private bool _isConnected = false;
    private bool _loading = false;
    private List<PartitionTableInfo> _partitionTables = new();
    private IEnumerable<PartitionTableInfo> _selectedTableRows = Array.Empty<PartitionTableInfo>();
    private PartitionTableInfo? _selectedTable = null;
    private bool _loadingDetails = false;
    private List<PartitionDetailInfo> _partitionDetails = new();
    private IEnumerable<PartitionDetailInfo> _selectedPartitionRows = Array.Empty<PartitionDetailInfo>();
    private bool _sourceServerModalVisible = false;
    private bool _targetServerModalVisible = false;
    private TargetServerConfigModel _targetServerModel = new();
    private bool _testingTargetConnection = false;
    private string _targetConnectionTestResult = "";
    private bool _targetConnectionTestSuccess = false;
    private bool _partitionConfigModalVisible = false;
    private string PartitionConfigModalTitle { get; set; } = "分区配置向导";
    private bool _addPartitionValueModalVisible = false;
    private bool _splitModalVisible = false;
    private bool _mergeModalVisible = false;
    private bool _switchModalVisible = false;

    // Tabs and configuration drafts
    private string _activeTab = "partitioned";
    private List<ConfigurationDraftInfo> _configurationDrafts = new();
    private IEnumerable<ConfigurationDraftInfo> _selectedDraftRows = Array.Empty<ConfigurationDraftInfo>();
    private ConfigurationDraftInfo? _selectedDraft;
    private Guid? _editingConfigurationId;
    private PartitionConfigurationDetailModel? _editingConfigurationDetail;
    private bool _partitionConfigWizardIsEdit;
    private bool CanEditDraft =>
        _activeTab == "drafts" &&
        _selectedDraft is not null &&
        !_selectedDraft.IsCommitted &&
        !_selectedDraft.IsPartitioned;

    private bool _loadingDrafts = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataSourceInfoAsync();
        await LoadPartitionTablesAsync();
        await LoadConfigurationDraftsAsync();
    }

    private async Task OnTabChanged(string key)
    {
        _activeTab = key;
        if (key == "drafts")
        {
            await LoadConfigurationDraftsAsync();
        }
        else
        {
            _selectedDraft = null;
            _selectedDraftRows = Array.Empty<ConfigurationDraftInfo>();
        }
    }

    private async Task LoadConfigurationDraftsAsync()
    {
        _loadingDrafts = true;
        try
        {
            var previousSelectedId = _selectedDraft?.Id;
            var result = await PartitionConfigApi.GetByDataSourceAsync(DataSourceId);
            if (result.IsSuccess && result.Value != null)
            {
                var partitionedLookup = new HashSet<string>(
                    _partitionTables.Select(t => $"{t.SchemaName}.{t.TableName}".ToLowerInvariant()));

                _configurationDrafts = result.Value.Select(d => new ConfigurationDraftInfo
                {
                    Id = d.Id,
                    SchemaName = d.SchemaName,
                    TableName = d.TableName,
                    PartitionColumnName = d.PartitionColumnName,
                    PartitionFunctionName = d.PartitionFunctionName,
                    PartitionSchemeName = d.PartitionSchemeName,
                    BoundaryCount = d.BoundaryCount,
                    StorageMode = d.StorageMode,
                    TargetTableName = d.TargetTableName,
                    CreatedAtUtc = d.CreatedAtUtc,
                    CreatedBy = d.CreatedBy,
                    Remarks = d.Remarks,
                    IsCommitted = d.IsCommitted,
                    IsPartitioned = partitionedLookup.Contains($"{d.SchemaName}.{d.TableName}".ToLowerInvariant())
                }).ToList();

                if (previousSelectedId.HasValue)
                {
                    _selectedDraft = _configurationDrafts.FirstOrDefault(d => d.Id == previousSelectedId.Value);
                }
                else
                {
                    _selectedDraft = null;
                }

                _selectedDraftRows = _selectedDraft is null
                    ? Array.Empty<ConfigurationDraftInfo>()
                    : new[] { _selectedDraft };
            }
            else
            {
                _configurationDrafts = new List<ConfigurationDraftInfo>();
                if (!result.IsSuccess)
                {
                    Message.Warning($"加载配置草稿失败: {result.Error}");
                }

                _selectedDraft = null;
                _selectedDraftRows = Array.Empty<ConfigurationDraftInfo>();
            }
        }
        catch (Exception ex)
        {
            Message.Error($"加载配置草稿失败: {ex.Message}");
            _configurationDrafts = new List<ConfigurationDraftInfo>();
            _selectedDraft = null;
            _selectedDraftRows = Array.Empty<ConfigurationDraftInfo>();
        }
        finally
        {
            _loadingDrafts = false;
        }
    }

    private async Task DeleteConfigurationDraftAsync(Guid configurationId)
    {
        try
        {
            var result = await PartitionConfigApi.DeleteAsync(configurationId);
            if (result.IsSuccess)
            {
                Message.Success("配置草稿已删除");
                if (_selectedDraft?.Id == configurationId)
                {
                    _selectedDraft = null;
                    _selectedDraftRows = Array.Empty<ConfigurationDraftInfo>();
                }
                await LoadConfigurationDraftsAsync();
            }
            else
            {
                Message.Error($"删除失败: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            Message.Error($"删除失败: {ex.Message}");
        }
    }

    private async Task EditConfigurationDraftAsync(ConfigurationDraftInfo draft)
    {
        _selectedDraft = draft;
        _selectedDraftRows = new[] { draft };

        if (draft.IsCommitted)
        {
            Message.Warning("该配置已执行，无法修改。");
            return;
        }

        if (draft.IsPartitioned)
        {
            Message.Warning("目标表已是分区表，只能通过分区操作调整边界。");
            return;
        }

        try
        {
            var detailResult = await PartitionConfigApi.GetAsync(draft.Id);
            if (!detailResult.IsSuccess || detailResult.Value is null)
            {
                Message.Error($"加载配置详情失败: {detailResult.Error ?? "未知错误"}");
                return;
            }

            var detail = detailResult.Value;
            if (detail.IsCommitted)
            {
                Message.Warning("该配置已执行，无法修改。");
                await LoadConfigurationDraftsAsync();
                return;
            }

            if (detail.SourceTableIsPartitioned)
            {
                Message.Warning("目标表已是分区表，只能通过分区操作调整边界。");
                return;
            }

            _editingConfigurationId = draft.Id;
            _editingConfigurationDetail = detail;
            PartitionConfigModalTitle = "编辑分区配置";
            _partitionConfigWizardIsEdit = true;
            _partitionConfigModalVisible = true;
        }
        catch (Exception ex)
        {
            Message.Error($"加载配置详情失败: {ex.Message}");
        }
    }

    private async Task LoadDataSourceInfoAsync()
    {
        try
        {
            // 从API加载数据源信息
            var response = await PartitionInfoApi.GetDataSourceAsync(DataSourceId);
            if (response != null)
            {
                _dataSourceName = response.Name ?? "未命名数据源";
                _serverAddress = response.ServerAddress ?? "";
                _serverPort = response.ServerPort;
                _databaseName = response.DatabaseName ?? "";
                _useIntegratedSecurity = response.UseIntegratedSecurity;
                _userName = response.UserName ?? "";
                _isConnected = true;
            }
        }
        catch (Exception ex)
        {
            Message.Error($"加载数据源信息失败: {ex.Message}");
        }
    }

    private async Task LoadPartitionTablesAsync()
    {
        _loading = true;
        try
        {
            // 从API加载真实分区表数据
            var tables = await PartitionInfoApi.GetPartitionTablesAsync(DataSourceId);
            _partitionTables = tables.Select(t => new PartitionTableInfo
            {
                SchemaName = t.SchemaName,
                TableName = t.TableName,
                PartitionFunction = t.PartitionFunction,
                PartitionScheme = t.PartitionScheme,
                PartitionColumn = t.PartitionColumn,
                DataType = t.DataType,
                TotalPartitions = t.TotalPartitions,
                IsRangeRight = t.IsRangeRight
            }).ToList();
        }
        catch (Exception ex)
        {
            Message.Error($"加载分区表失败: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task LoadPartitionDetailsAsync(PartitionTableInfo table)
    {
        _loadingDetails = true;
        _partitionDetails = new List<PartitionDetailInfo>();
        await InvokeAsync(StateHasChanged);
        try
        {
            // 从API加载真实分区明细数据
            var details = await PartitionInfoApi.GetPartitionDetailsAsync(DataSourceId, table.SchemaName, table.TableName);
            _partitionDetails = details.Select(d => new PartitionDetailInfo
            {
                PartitionNumber = d.PartitionNumber,
                BoundaryValue = FormatBoundaryValue(d.BoundaryValue, table.DataType),
                RangeType = d.RangeType,
                FilegroupName = d.FilegroupName,
                RowCount = d.RowCount,
                TotalSpaceMB = d.TotalSpaceMB,
                DataCompression = d.DataCompression,
                CreatedDate = DateTime.Now // API未返回,使用当前时间占位
            }).ToList();
        }
        catch (Exception ex)
        {
            Message.Error($"加载分区明细失败: {ex.Message}");
        }
        finally
        {
            _loadingDetails = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void OnTableRowClick(RowData<PartitionTableInfo> row)
    {
        _selectedTable = row.Data;
        _selectedTableRows = new[] { row.Data };
        _selectedPartitionRows = Array.Empty<PartitionDetailInfo>();

        _ = InvokeAsync(async () =>
        {
            StateHasChanged();
            await LoadPartitionDetailsAsync(row.Data);
        });
    }

    private void OnDraftRowClick(RowData<ConfigurationDraftInfo> row)
    {
        if (row?.Data is null)
        {
            return;
        }

        _selectedDraft = row.Data;
        _selectedDraftRows = new[] { row.Data };
        _ = InvokeAsync(StateHasChanged);
    }

    private string GetPartitionRowClass(RowData<PartitionTableInfo> row) =>
        row.Data == _selectedTable ? "table-row-selected" : string.Empty;

    private string GetDraftRowClass(RowData<ConfigurationDraftInfo> row) =>
        _selectedDraft is not null && row.Data.Id == _selectedDraft.Id ? "table-row-selected" : string.Empty;

    private async Task ReloadAsync()
    {
        await LoadPartitionTablesAsync();
        if (_selectedTable != null) await LoadPartitionDetailsAsync(_selectedTable);
    }

    private void NavigateBack() => Navigation.NavigateTo("/");
    private void ShowSourceServerInfo() => _sourceServerModalVisible = true;
    
    private async Task ShowTargetServerConfig()
    {
        // 从API加载当前目标服务器配置
        try
        {
            var dataSource = await PartitionInfoApi.GetDataSourceAsync(DataSourceId);
            if (dataSource != null)
            {
                _targetServerModel = new TargetServerConfigModel
                {
                    UseSourceAsTarget = dataSource.UseSourceAsTarget,
                    ServerAddress = dataSource.TargetServerAddress ?? "",
                    Port = dataSource.TargetServerPort,
                    DatabaseName = dataSource.TargetDatabaseName ?? "",
                    UseIntegratedSecurity = dataSource.TargetUseIntegratedSecurity,
                    UserName = dataSource.TargetUserName ?? "",
                    Password = "" // 安全起见不回显密码
                };
            }
            _targetServerModalVisible = true;
        }
        catch (Exception ex)
        {
            Message.Error($"加载目标服务器配置失败: {ex.Message}");
        }
    }
    private Task ShowAddPartitionConfig()
    {
        PartitionConfigModalTitle = "分区配置向导";
        _partitionConfigWizardIsEdit = false;
        _editingConfigurationId = null;
        _editingConfigurationDetail = null;
        _partitionConfigModalVisible = true;
        return Task.CompletedTask;
    }

    private async Task EditSelectedDraftAsync()
    {
        if (!CanEditDraft || _selectedDraft is null)
        {
            return;
        }

        await EditConfigurationDraftAsync(_selectedDraft);
    }

    private Task HandlePartitionWizardVisibleChanged(bool value)
    {
        _partitionConfigModalVisible = value;
        if (!value)
        {
            _partitionConfigWizardIsEdit = false;
            _editingConfigurationId = null;
            _editingConfigurationDetail = null;
        }
        return Task.CompletedTask;
    }

    private async Task OnPartitionConfigCompletedAsync()
    {
        var previousSelection = _selectedTable;
        await LoadPartitionTablesAsync();

        if (previousSelection is not null)
        {
            var refreshed = _partitionTables.FirstOrDefault(t =>
                string.Equals(t.SchemaName, previousSelection.SchemaName, StringComparison.OrdinalIgnoreCase) &&
                string.Equals(t.TableName, previousSelection.TableName, StringComparison.OrdinalIgnoreCase));

            if (refreshed is not null)
            {
                _selectedTable = refreshed;
                _selectedTableRows = new[] { refreshed };
                await LoadPartitionDetailsAsync(refreshed);
            }
        }

        await LoadConfigurationDraftsAsync();
        _partitionConfigWizardIsEdit = false;
        _editingConfigurationId = null;
        _editingConfigurationDetail = null;
    }
    private void ShowAddPartitionValue() => _addPartitionValueModalVisible = true;
    private void ShowSplitPartition() => _splitModalVisible = true;
    private void ShowMergePartition() => _mergeModalVisible = true;
    private void ShowSwitchPartition() => _switchModalVisible = true;
    private void ViewTableDetails(PartitionTableInfo table) { }
    
    private async Task TestTargetServerConnection()
    {
        _testingTargetConnection = true;
        _targetConnectionTestResult = "";
        _targetConnectionTestSuccess = false;

        try
        {
            // 验证必填字段
            if (string.IsNullOrWhiteSpace(_targetServerModel.ServerAddress))
            {
                _targetConnectionTestResult = "请输入服务器地址";
                _targetConnectionTestSuccess = false;
                return;
            }
            if (string.IsNullOrWhiteSpace(_targetServerModel.DatabaseName))
            {
                _targetConnectionTestResult = "请输入数据库名称";
                _targetConnectionTestSuccess = false;
                return;
            }
            if (!_targetServerModel.UseIntegratedSecurity && string.IsNullOrWhiteSpace(_targetServerModel.UserName))
            {
                _targetConnectionTestResult = "使用SQL身份验证时必须输入用户名";
                _targetConnectionTestSuccess = false;
                return;
            }

            // 调用 API 测试连接
            var testRequest = new TestConnectionRequest
            {
                ServerAddress = _targetServerModel.ServerAddress,
                ServerPort = _targetServerModel.Port,
                DatabaseName = _targetServerModel.DatabaseName,
                UseIntegratedSecurity = _targetServerModel.UseIntegratedSecurity,
                UserName = _targetServerModel.UserName,
                Password = _targetServerModel.Password
            };

            var result = await PartitionInfoApi.TestConnectionAsync(testRequest);
            _targetConnectionTestSuccess = result;
            _targetConnectionTestResult = result ? "连接成功！" : "连接失败，请检查配置";
        }
        catch (Exception ex)
        {
            _targetConnectionTestSuccess = false;
            _targetConnectionTestResult = $"连接失败: {ex.Message}";
        }
        finally
        {
            _testingTargetConnection = false;
        }
    }
    
    private async Task SaveTargetServerConfig()
    {
        try
        {
            // 验证表单
            if (!_targetServerModel.UseSourceAsTarget)
            {
                if (string.IsNullOrWhiteSpace(_targetServerModel.ServerAddress))
                {
                    Message.Warning("请输入目标服务器地址");
                    return;
                }
                if (string.IsNullOrWhiteSpace(_targetServerModel.DatabaseName))
                {
                    Message.Warning("请输入目标数据库名称");
                    return;
                }
                if (!_targetServerModel.UseIntegratedSecurity && string.IsNullOrWhiteSpace(_targetServerModel.UserName))
                {
                    Message.Warning("使用SQL Server身份验证时必须输入用户名");
                    return;
                }
            }

            // 调用API保存配置
            var request = new UpdateTargetServerConfigRequest
            {
                UseSourceAsTarget = _targetServerModel.UseSourceAsTarget,
                TargetServerAddress = _targetServerModel.ServerAddress,
                TargetServerPort = _targetServerModel.Port,
                TargetDatabaseName = _targetServerModel.DatabaseName,
                TargetUseIntegratedSecurity = _targetServerModel.UseIntegratedSecurity,
                TargetUserName = _targetServerModel.UserName,
                TargetPassword = _targetServerModel.Password
            };

            await PartitionInfoApi.UpdateTargetServerConfigAsync(DataSourceId, request);
            Message.Success("目标服务器配置已保存");
            _targetServerModalVisible = false;
        }
        catch (Exception ex)
        {
            Message.Error($"保存目标服务器配置失败: {ex.Message}");
        }
    }

    /// <summary>
    /// 分区配置草稿信息（用于列表显示）
    /// </summary>
    private class ConfigurationDraftInfo
    {
        public Guid Id { get; set; }
        public string SchemaName { get; set; } = string.Empty;
        public string TableName { get; set; } = string.Empty;
        public string PartitionColumnName { get; set; } = string.Empty;
        public string PartitionFunctionName { get; set; } = string.Empty;
        public string PartitionSchemeName { get; set; } = string.Empty;
        public int BoundaryCount { get; set; }
        public string StorageMode { get; set; } = string.Empty;
        public string TargetTableName { get; set; } = string.Empty;
        public DateTime CreatedAtUtc { get; set; }
        public string CreatedBy { get; set; } = string.Empty;
        public string? Remarks { get; set; }
        public bool IsCommitted { get; set; }
        public bool IsPartitioned { get; set; }
    }

    private class PartitionDetailInfo
    {
        public int PartitionNumber { get; set; }
        public string BoundaryValue { get; set; } = "";
        public string RangeType { get; set; } = "";
        public string FilegroupName { get; set; } = "";
        public long RowCount { get; set; }
        public decimal TotalSpaceMB { get; set; }
        public string DataCompression { get; set; } = "NONE";
        public DateTime CreatedDate { get; set; }
    }

    private static string FormatBoundaryValue(string value, string? dataType)
    {
        if (string.IsNullOrWhiteSpace(value) || string.Equals(value, "N/A", StringComparison.OrdinalIgnoreCase))
        {
            return value;
        }

        if (string.IsNullOrWhiteSpace(dataType))
        {
            return value;
        }

        var normalizedType = dataType.ToLowerInvariant();
        if (normalizedType is "date" or "datetime" or "datetime2" or "smalldatetime" or "datetimeoffset")
        {
            var trimmed = value.Trim();
            if (DateTime.TryParse(trimmed, CultureInfo.InvariantCulture, DateTimeStyles.AllowWhiteSpaces | DateTimeStyles.AssumeLocal, out var parsed) ||
                DateTime.TryParse(trimmed, CultureInfo.CurrentCulture, DateTimeStyles.AllowWhiteSpaces, out parsed))
            {
                return parsed.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
            }
        }

        return value;
    }

    /// <summary>
    /// 目标服务器配置表单模型
    /// </summary>
    private class TargetServerConfigModel
    {
        /// <summary>
        /// 是否使用源服务器作为目标服务器
        /// </summary>
        public bool UseSourceAsTarget { get; set; } = true;

        /// <summary>
        /// 目标服务器地址
        /// </summary>
        public string ServerAddress { get; set; } = "";

        /// <summary>
        /// 目标服务器端口
        /// </summary>
        public int Port { get; set; } = 1433;

        /// <summary>
        /// 目标数据库名称
        /// </summary>
        public string DatabaseName { get; set; } = "";

        /// <summary>
        /// 是否使用集成认证
        /// </summary>
        public bool UseIntegratedSecurity { get; set; } = true;

        /// <summary>
        /// 用户名
        /// </summary>
        public string UserName { get; set; } = "";

        /// <summary>
        /// 密码
        /// </summary>
        public string Password { get; set; } = "";
    }
}







