@page "/admin/register"
@layout AuthLayout
@using System
@using AntDesign
@using DbArchiveTool.Application.AdminUsers
@using DbArchiveTool.Web.Core
@using DbArchiveTool.Web.Services

<h3 class="auth-layout__title">注册管理员账户</h3>
<p class="auth-layout__subtitle">首次使用请创建管理员账号，以便配置数据库归档系统的访问权限。</p>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <Alert Type="AlertType.Error" ShowIcon="true" Message="@_errorMessage" Style="margin-bottom:16px;" />
}

<Form Model="_model" OnFinish="HandleSubmitAsync" Layout="@FormLayout.Vertical" Class="auth-form auth-form--stacked">
    <FormItem Name="UserName" Class="auth-form__field">
        <Input Size="InputSize.Large"
               Placeholder="请输入管理员用户名"
               @bind-Value="_model.UserName"
               PrefixIcon="user" />
    </FormItem>
    <FormItem Name="Password" Class="auth-form__field">
        <InputPassword Size="InputSize.Large"
                       Placeholder="请设置登录密码（至少 6 位）"
                       @bind-Value="_model.Password"
                       PrefixIcon="lock" />
    </FormItem>
    <FormItem Name="ConfirmPassword" Class="auth-form__field">
        <InputPassword Size="InputSize.Large"
                       Placeholder="请再次输入登录密码"
                       @bind-Value="_model.ConfirmPassword"
                       PrefixIcon="check-circle" />
    </FormItem>
    <FormItem Class="auth-form__actions" NoStyle="true">
        <div class="auth-form__actions-body">
            <Button Type="ButtonType.Primary"
                    HtmlType="ButtonHtmlType.Submit"
                    Size="ButtonSize.Large"
                    Loading="_isSubmitting"
                    Block>
                注册并登录
            </Button>
            <Button Type="ButtonType.Default"
                    Size="ButtonSize.Large"
                    Block
                    OnClick="NavigateToLogin">
                已有账号？前往登录
            </Button>
        </div>
    </FormItem>
</Form>

@code {
    /// <summary>注入 App 根实例用于刷新路由。</summary>
    [CascadingParameter] public App? RootApp { get; set; }

    /// <summary>注册表单模型。</summary>
    private readonly RegisterAdminUserRequest _model = new();

    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private AdminUserApiClient ApiClient { get; set; } = default!;
    [Inject] private AdminSessionState SessionState { get; set; } = default!;
    [Inject] private AdminAuthStorageService AuthStorage { get; set; } = default!;

    private bool _isSubmitting;
    private string? _errorMessage;

    private async Task HandleSubmitAsync()
    {
        _errorMessage = null;
        _isSubmitting = true;

        try
        {
            if (!ValidateInputs())
            {
                return;
            }

            var request = new RegisterAdminUserRequest
            {
                UserName = _model.UserName.Trim(),
                Password = _model.Password,
                ConfirmPassword = _model.ConfirmPassword
            };

            var result = await ApiClient.RegisterAsync(request);
            if (!result.IsSuccess || result.Value == Guid.Empty)
            {
                _errorMessage = result.Error ?? "注册失败，请稍后再试";
                return;
            }

            SessionState.SignIn(result.Value, request.UserName);
            try
            {
                await AuthStorage.SaveAsync(new AdminAuthTicket(result.Value, request.UserName, true), true);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Register] 无法保存本地登录票据: {ex.Message}");
            }

            RootApp?.MarkAdminCreated();
            Navigation.NavigateTo("/");
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private bool ValidateInputs()
    {
        if (string.IsNullOrWhiteSpace(_model.UserName))
        {
            _errorMessage = "请输入管理员用户名";
            return false;
        }

        if (_model.UserName.Trim().Length < 4)
        {
            _errorMessage = "用户名长度至少 4 个字符";
            return false;
        }

        if (string.IsNullOrWhiteSpace(_model.Password))
        {
            _errorMessage = "请输入登录密码";
            return false;
        }

        if (_model.Password.Length < 6)
        {
            _errorMessage = "密码长度至少 6 位";
            return false;
        }

        if (!string.Equals(_model.Password, _model.ConfirmPassword, StringComparison.Ordinal))
        {
            _errorMessage = "两次输入的密码不一致";
            return false;
        }

        return true;
    }
}
